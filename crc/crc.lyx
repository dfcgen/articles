#LyX 1.6.0 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass scrartcl
\begin_preamble
\input{all-inc}
\DeclareMathOperator{\crc}{CRC}
\end_preamble
\options reqno
\use_default_options false
\begin_modules
emphasized
\end_modules
\language german
\inputencoding latin1
\font_roman times
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_subject "CRC"
\pdf_keywords "CRC, Algebra"
\pdf_bookmarks true
\pdf_bookmarksnumbered true
\pdf_bookmarksopen true
\pdf_bookmarksopenlevel 3
\pdf_breaklinks true
\pdf_pdfborder true
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\papersize a4paper
\use_geometry false
\use_amsmath 1
\use_esint 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\branch WITH_APPENDIX
\selected 0
\color #faf0e6
\end_branch
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 2
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Version $Id: crc.lyx,v 1.9 2008-11-30 14:10:48 ralf Exp $
\end_layout

\end_inset


\end_layout

\begin_layout Title
Zyklische Codes & CRC
\end_layout

\begin_layout Author
Copyright 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
textcopyright
\backslash
  
\backslash
number
\backslash
year
\backslash
 
\end_layout

\end_inset

 Ralf Hoppe
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Section
Einführung
\end_layout

\begin_layout Standard
Oft besteht die Forderung den Verlust (oder auch die Manipulation) von Daten
 mit relativ einfachen Mitteln nachzuweisen.
 Einer der häufigsten Anwendungsfälle ist die Datenübertragung, bei welcher
 die Informationen meist blockweise strukturiert sind.
 Ein bevorzugtes Verfahren für diese Aufgabe ist das sogenannte CRC (Cyclic
 Redundancy Check), welches häufig als 
\emph on
Frame Check Sequence
\emph default
 (FCS) oder 
\emph on
Error Detection Code
\emph default
 (EDC) angewendet wird.
\end_layout

\begin_layout Standard
Das CRC-Verfahren ist eine relativ leistungsfähige (als auch einfach zu
 implementierende) Methode zur Fehlererkennung.
 Grundlage bilden sogenannte zyklische Codes (ein Spezialfall der linearen
 Block-Codes), welche aus theoretischer Sicht mittlerweile hinreichend untersuch
t sind.
 Dieser Beitrag wird die wesentlichen Eigenschaften solcher Codes präsentieren
 sowie den Zusammenhang mit dem häufig zitierten Begriff 
\emph on
CRC
\emph default
 herstellen
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Sweeney:1992,Peterson:1972,Born:Toolbox:1989"

\end_inset

.
\end_layout

\begin_layout Section
Grundlagen
\end_layout

\begin_layout Standard
\begin_inset Index
status collapsed

\begin_layout Plain Layout
Körper
\end_layout

\end_inset


\begin_inset Index
status collapsed

\begin_layout Plain Layout
Galois Field
\end_layout

\end_inset

Eine grundlegende Vorbetrachtung für alle folgenden Ausführungen ist die,
 daß man einem beliebigen Bitstring der Länge 
\begin_inset Formula $n$
\end_inset

 ein äquivalentes Polynom
\begin_inset Index
status collapsed

\begin_layout Plain Layout
Polynom
\end_layout

\end_inset

 
\begin_inset Formula $P(x)=a_{n-1}x^{n-1}+a_{n-2}x^{n-2}+\cdots+a_{2}x^{2}+a_{1}x+a_{0}$
\end_inset

 zuordnen kann.
 Setzt man nun für 
\begin_inset Formula $x$
\end_inset

 Elemente eines Körpers 
\begin_inset Formula $\mathbb{F}$
\end_inset

 (im binären Fall 
\begin_inset Formula $\mathbb{F}_{2}$
\end_inset

) ein, so erhält man ein Polynom, daß auf dem Körper 
\begin_inset Formula $\mathbb{F}_{2^{n}}$
\end_inset

 definiert ist
\begin_inset Foot
status open

\begin_layout Plain Layout
In der Sprachweise der Mathematiker auch 
\noun on
Galois
\noun default
-Feld genannt (
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
cf
\end_layout

\end_inset

 insbesondere Anhang
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:algebra_residue_classes"

\end_inset

 zur Theorie).
\end_layout

\end_inset

.
 Die Koeffizienten 
\begin_inset Formula $a_{0},\ldots,a_{n-1}$
\end_inset

 sind ebenfalls Elemente des Körpers 
\begin_inset Formula $\mathbb{F}_{2}$
\end_inset

 und nehmen deshalb nur die Werte 
\begin_inset Formula $0$
\end_inset

 oder 
\begin_inset Formula $1$
\end_inset

 an
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Bei Berechnungen muß im Körper 
\begin_inset Formula $\mathbb{F}_{2}$
\end_inset

 muß in diesem Zusammenhang immer berücksichtigt werden, daß statt der üblichen
 Addition eine modulo-2 Addition (entspricht Exklusiv-Oder) ausgeführt wird.
\end_layout

\end_inset

.
 Ein solches Polynom heißt irreduzibel über 
\begin_inset Formula $\mathbb{F}_{2^{n}}$
\end_inset

, wenn es sich nicht als Produkt von Polynomen kleineren Grades darstellen
 läßt.
\end_layout

\begin_layout Section
Erzeugung zyklischer Codes
\end_layout

\begin_layout Standard
Der zu sichernde Datenblock mit einer Länge von 
\begin_inset Formula $n$
\end_inset

 Bit wird zur Bildung eines zyklischen Codes als erstes um 
\begin_inset Formula $k$
\end_inset


\begin_inset space ~
\end_inset

Bit nach links verschoben.
 Dies bedeutet für das zugeordnete Polynom 
\begin_inset Formula $M(x)$
\end_inset

 eine Multiplikation mit 
\begin_inset Formula $x^{k}$
\end_inset

.
 Danach wird 
\begin_inset Formula $M(x)$
\end_inset

 durch ein sogenanntes Generatorpolynom 
\begin_inset Formula $G(x)=g_{k}x^{k}+g_{k-1}x^{k-1}+\cdots+g_{2}x^{2}+g_{1}x+g_{0}$
\end_inset

 vom Grad 
\begin_inset Formula $k$
\end_inset

 im Körper 
\begin_inset Formula $\GF(2)$
\end_inset

 dividiert.
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
\frac{x^{k}M(x)}{G(x)}=F(x)+\frac{R(x)}{G(x)}\label{eq:crc_base_div}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
Der dabei entstehende Divisionsrest
\end_layout

\begin_layout Emph(asized)
\begin_inset Formula \begin{equation}
R(x)=\crc\{M(x)\}=x^{k}M(x)\bmod{G(x)}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
dessen Grad 
\begin_inset Formula $k-1$
\end_inset

 ist, wird zur Kontrolle des Informationsblockes 
\begin_inset Formula $M(x)$
\end_inset

 verwendet
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Formula $F(x)$
\end_inset

 als ganzer Anteil, der bei der Division entsteht, ist für das Prüfverfahren
 nicht von Bedeutung.
\end_layout

\end_inset

.
 Dazu wird der entstandene CRC-Rest 
\begin_inset Formula $R(x)$
\end_inset

 einfach an den Datenblock 
\begin_inset Formula $M(x)$
\end_inset

 angehängt und so ein (gültiges) Codewort 
\begin_inset Formula $C(x)$
\end_inset

 des zu 
\begin_inset Formula $G(x)$
\end_inset

 gehörigen zyklischen Codes gebildet.
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
C(x)=x^{k}M(x)+R(x)\label{eq:crc_code_word}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
Zyklische Codes gehören zu den linearen Block-Codes.
 Sie haben die bemerkenswerte Eigenschaft, daß man ausgehend von einem bekannten
 Codewort alle anderen durch zyklische Verschiebung und Addition bestimmen
 kann
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Sweeney:1992"

\end_inset

.
 
\begin_inset Formula $G(x)$
\end_inset

 definiert alle Codeworte des zugeordneten Alphabets eindeutig und wird
 deshalb auch das erzeugende Polynom 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
resp
\end_layout

\end_inset

 auch Generatorpolynom genannt.
\end_layout

\begin_layout Section
Verifikation
\end_layout

\begin_layout Subsection
Prinzip
\end_layout

\begin_layout Standard
Das Prinzip der Fehlererkennung besteht nun darin, daß sich jedes gültige
 Codewort als 
\begin_inset Formula $C(x)=F(x)G(x)$
\end_inset

 darstellen läßt, also ohne Rest durch 
\begin_inset Formula $G(x)$
\end_inset

 teilbar sein muß.
 Ein Nachweis dieser Eigenschaft ist recht schnell durch Kombination der
 Gleichungen
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "eq:crc_base_div"

\end_inset

 und
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "eq:crc_code_word"

\end_inset

 erbracht, wenn man die spezielle modulo-2 Addition 
\begin_inset Formula $H+H=0$
\end_inset

 berücksichtigt.
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{align*}
C(x) & =x^{k}M(x)+R(x)\\
 & =F(x)G(x)+R(x)+R(x)\\
 & =F(x)G(x)\end{align*}

\end_inset


\end_layout

\begin_layout Standard
Die Teilbarkeit des Codewortes 
\begin_inset Formula $C(x)$
\end_inset

 durch das Generatorpolynom 
\begin_inset Formula $G(x)$
\end_inset

 kann somit als Prüfkriterium für die Fehlerfreiheit der Übertragung verwendet
 werden.
\end_layout

\begin_layout Standard
\begin_inset Formula \[
C(x)\bmod G(x)=0\]

\end_inset


\end_layout

\begin_layout Standard
Wird im Fehlerfall 
\begin_inset Formula $C(x)$
\end_inset

 durch ein Fehlerpolynom 
\begin_inset Formula $E(x)$
\end_inset

 überlagert, dann ist die Summe mit hoher Wahrscheinlichkeit nicht mehr
 ohne Rest durch 
\begin_inset Formula $G(x)$
\end_inset

 teilbar
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Formula $C(x)+E(x)$
\end_inset

 gehört mit hoher Wahrscheinlichkeit nicht mehr zum Codealphabet.
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
[C(x)+E(x)]\bmod{G(x)}\neq0\label{eq:crc_err_cond}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
An dieser Stelle soll noch darauf hingeweisen sein, daß bei echten zyklischen
 Codes die Blocklänge 
\begin_inset Formula $m=n+k$
\end_inset

 nicht frei wählbar ist.
 Statt dessen ist sie die kleinste Zahl 
\begin_inset Formula $m$
\end_inset

, für die 
\begin_inset Formula $(x^{m}+1)\bmod G(x)=0$
\end_inset

 gilt, also 
\begin_inset Formula $x^{m}+1$
\end_inset

 ohne Rest durch 
\begin_inset Formula $G(x)$
\end_inset

 teilbar ist.
 
\begin_inset Formula $m$
\end_inset

 ist also ein vom Generatorpolynom abhängiger Wert, der dann seinen Maximalwert
 von 
\begin_inset Formula $m=2^{k}-1$
\end_inset

 erreicht, wenn 
\begin_inset Formula $G(x)$
\end_inset

 ein nicht weiter reduzierbares (also irreduzibles) Polynom ist
\begin_inset Foot
status open

\begin_layout Plain Layout
Aus praktischen Gründen wird 
\begin_inset Formula $m$
\end_inset

 allerdings oft kleiner gewählt -- man nennt diese Codes dann verkürzte
 zyklische Codes.
 Sie besitzen die gleichen fehlererkennenden Eigenschaften wie echte zyklische
 Codes
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
after "8.10"
key "Peterson:1972"

\end_inset

.
 
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection
Fehlererkennende Eigenschaften
\end_layout

\begin_layout Standard
Da ja bekanntlich kein System ideal ist, muß man auch hier einräumen, daß
 es eine gewisse Anzahl nicht erkennbarer Fehler gibt -- die sogenannte
 Restfehlerwahrscheinlichkeit.
 Sie entsteht dadurch, daß manchmal auch 
\begin_inset Formula $E(x)$
\end_inset

 ohne Rest durch 
\begin_inset Formula $G(x)$
\end_inset

 teilbar sein kann und so genau wieder ein gültiges Codewort entsteht.
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{align}
[C(x)+E(x)]\bmod{G(x)} & =C(x)\bmod{G(x)}+E(x)\bmod{G(x)}\nonumber \\
 & =F(x)G(x)\bmod{G(x)}+E(x)\bmod{G(x)}\nonumber \\
 & =E(x)\bmod{G(x)}\label{eq:crc_err}\end{align}

\end_inset


\end_layout

\begin_layout Standard
Praktisch wählt man bei der Verifikation üblicherweise das gleiche Verfahren
 wie auf der Senderseite, 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
ie
\end_layout

\end_inset

 man muß noch die Vormultiplikation mit 
\begin_inset Formula $x^{k}$
\end_inset

 berücksichtigen.
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\left\{ [C(x)+E(x)]x^{k}\right\} \bmod{G(x)}=\left[E(x)\, x^{k}\right]\bmod{G(x)}\]

\end_inset


\end_layout

\begin_layout Standard
Die wichtigsten fehlererkennenden Eigenschaften der (verkürzten) zyklischen
 Codes sind:
\end_layout

\begin_layout Enumerate
Es werden grundsätzlich alle Einfachfehler (1 Bit verändert) erkannt.
\end_layout

\begin_layout Enumerate
Es werden alle Fehler erkannt, bei denen Anfang und Ende des Störmusters
 nicht weiter als 
\begin_inset Formula $k$
\end_inset


\begin_inset space ~
\end_inset

Bit auseinanderliegen (Burstfehler).
\end_layout

\begin_layout Enumerate
Statistisch gesehen ist die Restfehlerwahrscheinlichkeit für Bitfehler höchstens
 
\begin_inset Formula $2^{-k}$
\end_inset

.
\end_layout

\begin_layout Enumerate
Für bestimmte Generatorpolynome 
\begin_inset Formula $G(x)$
\end_inset

 lassen sich außerdem noch weitere Spezialisierungen angeben:
\end_layout

\begin_deeper
\begin_layout Itemize
Generatorpolynome 
\begin_inset Formula $G(x)$
\end_inset

, die durch 
\begin_inset Formula $1+x$
\end_inset

 teilbar sind, erkennen grundsätzlich jeden Fehlerburst, der eine ungerade
 Anzahl von Bit verändert
\begin_inset Foot
status open

\begin_layout Plain Layout
Schon allein diese Eigenschaft läßt einen Mathematiker gewöhnlich immer
 ein Generatorpolynom wählen, welches als 
\begin_inset Formula $G(x)=(1+x)P(x)$
\end_inset

 darstellbar ist.
\end_layout

\end_inset

.
\end_layout

\begin_layout Itemize
Alle Polynome 
\begin_inset Formula $G(x)$
\end_inset

 erkennen bis zu einer maximalen Blocklänge 
\begin_inset Formula $m$
\end_inset

 alle Zweifachfehler (für CRCs mit 
\begin_inset Formula $k=16$
\end_inset

 ist 
\begin_inset Formula $m$
\end_inset

 meist 
\begin_inset Formula $32767$
\end_inset

).
\end_layout

\begin_layout Itemize
Polynome, für die beide erstgenannten Punkte zutreffen, erkennen jeden Dreifachf
ehler.
\end_layout

\end_deeper
\begin_layout Standard
Bestimmte Klassen von Generatorpolynomen weisen in Bezug auf bestimmte Fehlerart
en unter Umständen noch günstigere fehlererkennende Eigenschaften auf.
 Vor allem zwei Typen von linearen Gruppencodes seien für Interessierte
 noch erwähnt: die 
\noun on
Fire
\noun default
-Codes und die 
\noun on
Bose-Chaudhuri-Hocquenghem
\noun default
 (BCH) Codes
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Peterson:1972"

\end_inset

.
 Mit Hilfe von 
\noun on
Fire
\noun default
-Codes ist nicht nur eine Fehlererkennung sondern sogar eine Korrektur von
 Fehlern bis zu einer definierten Anzahl von Bits möglich.
\end_layout

\begin_layout Subsubsection
Erkennung von Einfachfehlern
\end_layout

\begin_layout Standard
Wir wollen nun den Nachweis erbringen, daß zyklische Codes jeden Einfachfehler
 erkennen können.
 Das Fehlerpolynom kann bei dieser Art von Störung (eines einzelnen Bits)
 als 
\begin_inset Formula $E(x)=x^{r}$
\end_inset

 modelliert werden.
 Es gilt also, die allgemeine Erkennbarkeitsbedingung nach Gleichung
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "eq:crc_err"

\end_inset

 auf diesen Spezialfall des Fehlerpolynoms 
\begin_inset Formula $E(x)$
\end_inset

 anzuwenden.
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
E(x)\bmod{G(x)}=x^{r}\bmod{G(x)}\label{eq:crc_err_single}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
Für 
\begin_inset Formula $r<k$
\end_inset

 ist sofort ersichtlich, daß der Divisionsrest 
\begin_inset Formula $E(x)$
\end_inset

 selbst ist, also 
\begin_inset Formula $x^{r}\bmod{G(x)}=x^{r}$
\end_inset

 gilt.
 Im anderen Fall (
\begin_inset Formula $r\geq k$
\end_inset

) ist 
\begin_inset Formula $E(x)\bmod{G(x)}\neq0$
\end_inset

 dadurch gegeben, daß es sich bei 
\begin_inset Formula $G(x)$
\end_inset

 um ein irreduzibles Polynom und insgesamt um einen sogenannten Restklassenkörpe
r handelt (
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
cf
\end_layout

\end_inset

 Anhang
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:algebra_extfield"

\end_inset

).
\end_layout

\begin_layout Subsubsection
Erkennung von Burstfehlern
\end_layout

\begin_layout Standard
Wir wollen nun untersuchen, welche Burstfehler unter Benutzung eines zyklischen
 Codes erkennbar sind.
 Das Fehlerpolynom soll dabei die Form 
\begin_inset Formula $E(x)=x^{l}\,[e_{r}x^{r}+e_{r-1}x^{r-1}+\cdots+e_{2}x^{2}+e_{1}x+1]$
\end_inset

 besitzen, 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
ie
\end_layout

\end_inset

 
\begin_inset Formula $l$
\end_inset

 soll so gewählt sein, daß 
\begin_inset Formula $e_{0}=1$
\end_inset

 gilt.
 Die Fragestellung lautet also: Welche Polynome 
\begin_inset Formula $E(x)$
\end_inset

 sind im Sinne von Formel
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "eq:crc_err"

\end_inset

 ohne Rest durch 
\begin_inset Formula $G(x)$
\end_inset

 teilbar? Zur Beantwortung gehen wir von
\end_layout

\begin_layout Standard
\begin_inset Formula \[
E(x)\bmod{G(x)}=\left\{ x^{l}\left[e_{r}x^{r}+e_{r-1}x^{r-1}+\cdots+e_{2}x^{2}+e_{1}x+1\right]\right\} \bmod{G(x)}\]

\end_inset


\end_layout

\begin_layout Standard
aus und bedenken, daß 
\begin_inset Formula $E(x)$
\end_inset

 ein Codewort des Alphabets sein müßte, um einen solchen Fehler nicht zu
 erkennen.
\end_layout

\begin_layout Standard
\begin_inset Formula \[
E(x)=x^{l}\left[e_{r}x^{r}+e_{r-1}x^{r-1}+\cdots+e_{2}x^{2}+e_{1}x+1\right]=F(x)G(x)\]

\end_inset


\end_layout

\begin_layout Standard
Eine derartige Darstellung ist aber ausgeschlossen, solange 
\begin_inset Formula $r<k$
\end_inset

 gilt.
\end_layout

\begin_layout Subsection
Fehlerkorrigierende Eigenschaften
\end_layout

\begin_layout Standard
Geht man davon aus, daß es sich bei 
\begin_inset Formula $E(x)$
\end_inset

 um einen Einfachfehler handelt, so ist mit 
\begin_inset Formula $E(x)=x^{r}$
\end_inset

 entsprechend Formel
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "eq:crc_err_single"

\end_inset

 das folgende CRC (auf der Empfangsseite) zu gewinnen.
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\crc\{C(x)+E(x)\}=\left\{ [C(x)+E(x)]x^{k}\right\} \bmod{G(x)}=x^{r+k}\bmod{G(x)}\]

\end_inset


\end_layout

\begin_layout Standard
Je nachdem an welcher Stelle 
\begin_inset Formula $C(x)$
\end_inset

 nun gestört wird, ergeben sich (wegen 
\begin_inset Formula $0\leq r<n$
\end_inset

) genau 
\begin_inset Formula $n$
\end_inset

 mögliche Fehlerpolynome.
 Für alle diese 
\begin_inset Formula $E(x)$
\end_inset

 kann man das sogenannte Syndrom 
\begin_inset Formula $\crc\left[E_{r}(x)\right]=x^{r+k}\bmod{G(x)}$
\end_inset

 vorab berechnen.
 Ein Vergleich dieser Werte mit dem aktuellen 
\begin_inset Formula $\crc\{C(x)+E(x)\}=\crc\{E(x)\}$
\end_inset

 führt zum Bitfehler, also zur Position 
\begin_inset Formula $r$
\end_inset

 des gestörten Bits in 
\begin_inset Formula $E(x)=x^{r}$
\end_inset

.
 Sollte keine Übereinstimmung mit einem der vorberechneten Werte zu finden
 sein, dann muß ein Mehrfachfehler vorliegen.
 Solche Fehlermuster für 
\begin_inset Formula $E(x)$
\end_inset

 können ganz genauso wie Einzelfehler korrigiert werden
\begin_inset Foot
status open

\begin_layout Plain Layout
Wobei der Maximalzahl korrigierbarer Fehler sowohl theoretische als auch
 praktische Grenzen gesetzt sind.
\end_layout

\end_inset

, nur wird statt der Position 
\begin_inset Formula $r$
\end_inset

 nun das gesamte Fehlerpolynom 
\begin_inset Formula $E(x)$
\end_inset

 von Interesse sein.
 Die Korrektur erfolgt in diesem Fall durch modulo-2 Addition von 
\begin_inset Formula $E_{r}(x)$
\end_inset

 zu 
\begin_inset Formula $C(x)$
\end_inset

, falls dessen CRC in der Syndrom-Tabelle zu finden war.
\end_layout

\begin_layout Section
Realisierung
\end_layout

\begin_layout Subsection
Bitweise Verarbeitung
\end_layout

\begin_layout Standard
Die bitorientierten Realisierungsvarianten sind insbesondere bei Hardware-Implem
entierungen sehr effizient, können aber auch softwaretechnisch emuliert
 werden.
 Die Verarbeitung erfolgt dabei mittels rückgekoppelter Schieberegister
 (Linear Feedback Shift Register, LFSR), dessen Inhalt nach der letzten
 Verschiebung den (modulo-2) Divisionsrest darstellt
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Zaks:1982"

\end_inset

.
 In Abbildung
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:lfsr"

\end_inset

 ist das Grundprinzip eines solchen Divisions-Schieberegisters, welches
 
\begin_inset Formula $M(x)\bmod{G(x)}$
\end_inset

 berechnet, dargestellt
\begin_inset Foot
status open

\begin_layout Plain Layout
Eine Bedingung für diese Realisierung ist immer 
\begin_inset Formula $g_{0}=g_{k}=1$
\end_inset

, was praktisch keine wesentliche Einschränkung darstellt.
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename lfsr.eps
	scale 75

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:lfsr"

\end_inset

Divisions-Schieberegister
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Die Stellung der XOR-Gatter (Symbol
\begin_inset space ~
\end_inset


\begin_inset Graphics
	filename xor.eps
	scale 50
	rotateOrigin leftBaseline

\end_inset

) wird durch die Koeffizienten 
\begin_inset Formula $g_{i}$
\end_inset

 von 
\begin_inset Formula $G(x)$
\end_inset

, für die 
\begin_inset Formula $g_{i}=1$
\end_inset

 gilt, bestimmt.
\end_layout

\begin_layout Standard
Nachteil dieser Variante ist, daß die Multiplikation 
\begin_inset Formula $x^{k}M(x)$
\end_inset

, also das Nachstellen von 
\begin_inset Formula $k$
\end_inset

 Null-Bits vor der Verarbeitung im LFSR notwendig ist.
 Eine Alternative dazu zeigt Abbildung
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:lfsrmul"

\end_inset

, in der diese Operation durch Einspeisen von 
\begin_inset Formula $M(x)$
\end_inset

 an der Stelle 
\begin_inset Formula $x^{k}$
\end_inset

 durch das Schieberegister selbst vorgenommen wird.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename lfsrmul.eps
	scale 75

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:lfsrmul"

\end_inset

LFSR mit Vormultiplikation
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
An dieser Stelle soll noch geklärt werden, welchen Einfluß ein bestimmter
 Start- bzw.
 Anfangsrest, auf den das LFSR in Abbildung
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:lfsr"

\end_inset

 voreingestellt wird, auf den ursprünglich nach Gleichung
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "eq:crc_base_div"

\end_inset

 berechneten CRC-Wert hat
\begin_inset Foot
status open

\begin_layout Plain Layout
Oftmals werden alle Register auf 1 gesetzt, so daß auch wenn 
\begin_inset Formula $M(x)$
\end_inset

 das Nullpolynom ist, ein von Null verschiedener CRC-Rest entsteht
\end_layout

\end_inset

.
 Dazu kann der Anfangswert 
\begin_inset Formula $R_{0}(x)$
\end_inset

 als der Nachricht 
\begin_inset Formula $M(x)$
\end_inset

 vorangestellt aufgefaßt werden.
\end_layout

\begin_layout Standard
\begin_inset Formula \[
M'(x)=x^{m}R_{0}(x)+M(x)\]

\end_inset


\end_layout

\begin_layout Standard
Bildet man nun den CRC-Rest für die Gesamtnachricht 
\begin_inset Formula $M'(x)$
\end_inset

, also
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{eqnarray*}
\crc\{M'(x)\} & = & x^{k}\left[x^{m}R_{0}(x)+M(x)\right]\bmod{G(x)}\\
 & = & x^{k}x^{m}R_{0}(x)\bmod{G(x)}+x^{k}M(x)\bmod{G(x)}\\
 & = & \crc\left\{ x^{m}R_{0}(x)\right\} +\crc\left\{ M(x)\right\} ,\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
dann ist sofort erkennbar, daß der ohne Anfangsrest entstehende Rest 
\begin_inset Formula $R(x)=\crc\left\{ M(x)\right\} $
\end_inset

 durch Modulo-2-Addition mit 
\begin_inset Formula $\crc\left\{ x^{m}R_{0}(x)\right\} $
\end_inset

 modifiziert wird
\begin_inset Foot
status open

\begin_layout Plain Layout
Man kann den Fall ohne Anfangsrest (
\begin_inset Formula $R_{0}(x)=0$
\end_inset

) jetzt auch als Spezialfall dieser verallgemeinerten Darstellung auffassen.
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
In der Praxis ist das Verfahren außerdem noch in bestimmten Modifikationen
 anzutreffen, z.
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
,
\end_layout

\end_inset

B.
 Anhängen des invertierten CRC-Restes beim HDLC-Protokoll.
\end_layout

\begin_layout Subsection
Byteweise Verarbeitung
\end_layout

\begin_layout Standard
Nimmt man wieder an, daß 
\begin_inset Formula $M(x)$
\end_inset

 die zu sichernde Nachricht ist, dann wird bei der Bildung des 
\begin_inset Formula $\crc\{M(x)\}=R(x)$
\end_inset

 folgende Restklassendivision durchgeführt
\end_layout

\begin_layout Standard
\begin_inset Formula \[
R(x)=x^{k}M(x)\bmod{G(x)}.\]

\end_inset


\end_layout

\begin_layout Standard
Es wird also der Polynomrest 
\begin_inset Formula $R(x)$
\end_inset

 so bestimmt, daß
\end_layout

\begin_layout Standard
\begin_inset Formula \[
x^{k}M(x)=F(x)G(x)+R(x)\]

\end_inset


\end_layout

\begin_layout Standard
unter der Nebenbedingung 
\begin_inset Formula $R(x)<G(x)$
\end_inset

 erfüllt ist.
 Nimmt man zur Nachricht 
\begin_inset Formula $M(x)$
\end_inset

 nun ein weiteres Byte 
\begin_inset Formula $B(x)$
\end_inset

 hinzu, bildet also einen neue Nachricht
\end_layout

\begin_layout Standard
\begin_inset Formula \[
M'(x)=x^{8}M(x)+B(x),\]

\end_inset


\end_layout

\begin_layout Standard
dann gilt für den zugehörigen CRC-Rest 
\begin_inset Formula $R'(x)=\crc\{M'(x)\}$
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{align}
R'(x) & =x^{k}M'(x)\bmod{G(x)}\nonumber \\
 & =[x^{8}x^{k}M(x)+x^{k}B(x)]\bmod{G(x)}\nonumber \\
 & =[x^{8}R(x)+x^{k}B(x)]\bmod{G(x)}\mperiod\label{eq:crc_table_general}\end{align}

\end_inset


\end_layout

\begin_layout Standard
Zerlegt man jetzt 
\begin_inset Formula $R(x)$
\end_inset

 so in zwei Teile 
\begin_inset Formula $R(x)=x^{k-8}R_{1}(x)+R_{0}(x)$
\end_inset

, daß dessen höherwertiger Teil 
\begin_inset Formula $R_{1}(x)$
\end_inset

 durch 8
\begin_inset space ~
\end_inset

Bit und der niederwertige Teil 
\begin_inset Formula $R_{0}(x)$
\end_inset

 entsprechend durch 
\begin_inset Formula $k-8$
\end_inset

 Bit repräsentiert wird, dann gilt
\end_layout

\begin_layout Standard
\begin_inset Formula \[
x^{8}R_{0}(x)\bmod{G(x)}=x^{8}R_{0}(x)\]

\end_inset


\end_layout

\begin_layout Standard
und Gleichung
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "eq:crc_table_general"

\end_inset

 vereinfacht sich zu:
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{align*}
R'(x) & =[x^{k}R_{1}(x)+x^{k}B(x)]\bmod{G(x)}+x^{8}R_{0}(x)\\
 & =x^{k}[R_{1}(x)+B(x)]\bmod{G(x)}+x^{8}R_{0}(x)\\
 & =\crc\{R_{1}(x)+B(x)\}+x^{8}R_{0}(x)\mperiod\end{align*}

\end_inset


\end_layout

\begin_layout Standard
Für die durch 
\begin_inset Formula $8$
\end_inset


\begin_inset space ~
\end_inset

Bit darstellbaren 256
\begin_inset space ~
\end_inset

Werte ist es grundsätzlich kein Problem den CRC-Rest vorauszuberechnen und
 auf dieser Grundlage den Term 
\begin_inset Formula $\crc\{R_{1}(x)+B(x)\}$
\end_inset

 über einen Tabellenzugriff sehr schnell zu ermitteln.
\end_layout

\begin_layout Standard
\begin_inset Branch WITH_APPENDIX
status collapsed

\begin_layout Standard
\start_of_appendix
\begin_inset CommandInset include
LatexCommand include
filename "../algebra/algebra.lyx"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "adsp,computers,crypto,math"
options "gerplain"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset index_print
LatexCommand printindex

\end_inset


\end_layout

\end_body
\end_document
