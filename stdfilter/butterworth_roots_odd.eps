%!PS-Adobe-2.0 EPSF-2.0
%%Title: butterworth_roots_odd.eps
%%Creator: fig2dev Version 3.2 Patchlevel 3d
%%CreationDate: Mon Sep 27 15:31:50 2004
%%For: ralf@dfcgen (Ralf Hoppe)
%%BoundingBox: 0 0 224 226
%%Magnification: 1.0000
%%EndComments
/MyAppDict 100 dict dup begin def
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def
/col32 {0.808 0.812 0.808 srgb} bind def
/col33 {0.808 0.812 0.808 srgb} bind def
/col34 {0.808 0.812 0.808 srgb} bind def
/col35 {0.808 0.812 0.808 srgb} bind def
/col36 {0.808 0.812 0.808 srgb} bind def
/col37 {0.808 0.812 0.808 srgb} bind def
/col38 {0.808 0.812 0.808 srgb} bind def
/col39 {0.808 0.812 0.808 srgb} bind def
/col40 {0.808 0.812 0.808 srgb} bind def
/col41 {0.808 0.812 0.808 srgb} bind def
/col42 {0.808 0.812 0.808 srgb} bind def
/col43 {0.808 0.812 0.808 srgb} bind def
/col44 {0.808 0.812 0.808 srgb} bind def
/col45 {0.808 0.812 0.808 srgb} bind def
/col46 {0.808 0.812 0.808 srgb} bind def
/col47 {0.808 0.812 0.808 srgb} bind def
/col48 {0.808 0.812 0.808 srgb} bind def
/col49 {0.808 0.812 0.808 srgb} bind def
/col50 {0.808 0.812 0.808 srgb} bind def
/col51 {0.808 0.812 0.808 srgb} bind def
/col52 {0.808 0.812 0.808 srgb} bind def
/col53 {0.808 0.812 0.808 srgb} bind def
/col54 {0.808 0.812 0.808 srgb} bind def
/col55 {0.808 0.812 0.808 srgb} bind def
/col56 {0.549 0.557 0.549 srgb} bind def
/col57 {0.000 0.000 0.000 srgb} bind def
/col58 {1.000 1.000 1.000 srgb} bind def
/col59 {1.000 1.000 1.000 srgb} bind def

end
save
newpath 0 226 moveto 0 0 lineto 224 0 lineto 224 226 lineto closepath clip newpath
% Fill background color
0 0 moveto 224 0 lineto 224 226 lineto 0 226 lineto
closepath 1.00 1.00 1.00 setrgbcolor fill

-9.1 202.6 translate
1 -1 scale

% This junk string is used by the show operators
/PATsstr 1 string def
/PATawidthshow { 	% cx cy cchar rx ry string
  % Loop over each character in the string
  {  % cx cy cchar rx ry char
    % Show the character
    dup				% cx cy cchar rx ry char char
    PATsstr dup 0 4 -1 roll put	% cx cy cchar rx ry char (char)
    false charpath		% cx cy cchar rx ry char
    /clip load PATdraw
    % Move past the character (charpath modified the
    % current point)
    currentpoint			% cx cy cchar rx ry char x y
    newpath
    moveto			% cx cy cchar rx ry char
    % Reposition by cx,cy if the character in the string is cchar
    3 index eq {			% cx cy cchar rx ry
      4 index 4 index rmoveto
    } if
    % Reposition all characters by rx ry
    2 copy rmoveto		% cx cy cchar rx ry
  } forall
  pop pop pop pop pop		% -
  currentpoint
  newpath
  moveto
} bind def
/PATcg {
  7 dict dup begin
    /lw currentlinewidth def
    /lc currentlinecap def
    /lj currentlinejoin def
    /ml currentmiterlimit def
    /ds [ currentdash ] def
    /cc [ currentrgbcolor ] def
    /cm matrix currentmatrix def
  end
} bind def
% PATdraw - calculates the boundaries of the object and
% fills it with the current pattern
/PATdraw {			% proc
  save exch
    PATpcalc			% proc nw nh px py
    5 -1 roll exec		% nw nh px py
    newpath
    PATfill			% -
  restore
} bind def
% PATfill - performs the tiling for the shape
/PATfill { % nw nh px py PATfill -
  PATDict /CurrentPattern get dup begin
    setfont
    % Set the coordinate system to Pattern Space
    PatternGState PATsg
    % Set the color for uncolored pattezns
    PaintType 2 eq { PATDict /PColor get PATsc } if
    % Create the string for showing
    3 index string		% nw nh px py str
    % Loop for each of the pattern sources
    0 1 Multi 1 sub {		% nw nh px py str source
	% Move to the starting location
	3 index 3 index		% nw nh px py str source px py
	moveto			% nw nh px py str source
	% For multiple sources, set the appropriate color
	Multi 1 ne { dup PC exch get PATsc } if
	% Set the appropriate string for the source
	0 1 7 index 1 sub { 2 index exch 2 index put } for pop
	% Loop over the number of vertical cells
	3 index 		% nw nh px py str nh
	{			% nw nh px py str
	  currentpoint		% nw nh px py str cx cy
	  2 index oldshow	% nw nh px py str cx cy
	  YStep add moveto	% nw nh px py str
	} repeat		% nw nh px py str
    } for
    5 { pop } repeat
  end
} bind def

% PATkshow - kshow with the current pattezn
/PATkshow {			% proc string
  exch bind			% string proc
  1 index 0 get			% string proc char
  % Loop over all but the last character in the string
  0 1 4 index length 2 sub {
				% string proc char idx
    % Find the n+1th character in the string
    3 index exch 1 add get	% string proe char char+1
    exch 2 copy			% strinq proc char+1 char char+1 char
    % Now show the nth character
    PATsstr dup 0 4 -1 roll put	% string proc chr+1 chr chr+1 (chr)
    false charpath		% string proc char+1 char char+1
    /clip load PATdraw
    % Move past the character (charpath modified the current point)
    currentpoint newpath moveto
    % Execute the user proc (should consume char and char+1)
    mark 3 1 roll		% string proc char+1 mark char char+1
    4 index exec		% string proc char+1 mark...
    cleartomark			% string proc char+1
  } for
  % Now display the last character
  PATsstr dup 0 4 -1 roll put	% string proc (char+1)
  false charpath		% string proc
  /clip load PATdraw
  neewath
  pop pop			% -
} bind def
% PATmp - the makepattern equivalent
/PATmp {			% patdict patmtx PATmp patinstance
  exch dup length 7 add		% We will add 6 new entries plus 1 FID
  dict copy			% Create a new dictionary
  begin
    % Matrix to install when painting the pattern
    TilingType PATtcalc
    /PatternGState PATcg def
    PatternGState /cm 3 -1 roll put
    % Check for multi pattern sources (Level 1 fast color patterns)
    currentdict /Multi known not { /Multi 1 def } if
    % Font dictionary definitions
    /FontType 3 def
    % Create a dummy encoding vector
    /Encoding 256 array def
    3 string 0 1 255 {
      Encoding exch dup 3 index cvs cvn put } for pop
    /FontMatrix matrix def
    /FontBBox BBox def
    /BuildChar {
	mark 3 1 roll		% mark dict char
	exch begin
	Multi 1 ne {PaintData exch get}{pop} ifelse  % mark [paintdata]
	  PaintType 2 eq Multi 1 ne or
	  { XStep 0 FontBBox aload pop setcachedevice }
	  { XStep 0 setcharwidth } ifelse
	  currentdict		% mark [paintdata] dict
	  /PaintProc load	% mark [paintdata] dict paintproc
	end
	gsave
	  false PATredef exec true PATredef
	grestore
	cleartomark		% -
    } bind def
    currentdict
  end				% newdict
  /foo exch			% /foo newlict
  definefont			% newfont
} bind def
% PATpcalc - calculates the starting point and width/height
% of the tile fill for the shape
/PATpcalc {	% - PATpcalc nw nh px py
  PATDict /CurrentPattern get begin
    gsave
	% Set up the coordinate system to Pattern Space
	% and lock down pattern
	PatternGState /cm get setmatrix
	BBox aload pop pop pop translate
	% Determine the bounding box of the shape
	pathbbox			% llx lly urx ury
    grestore
    % Determine (nw, nh) the # of cells to paint width and height
    PatHeight div ceiling		% llx lly urx qh
    4 1 roll				% qh llx lly urx
    PatWidth div ceiling		% qh llx lly qw
    4 1 roll				% qw qh llx lly
    PatHeight div floor			% qw qh llx ph
    4 1 roll				% ph qw qh llx
    PatWidth div floor			% ph qw qh pw
    4 1 roll				% pw ph qw qh
    2 index sub cvi abs			% pw ph qs qh-ph
    exch 3 index sub cvi abs exch	% pw ph nw=qw-pw nh=qh-ph
    % Determine the starting point of the pattern fill
    %(px, py)
    4 2 roll				% nw nh pw ph
    PatHeight mul			% nw nh pw py
    exch				% nw nh py pw
    PatWidth mul exch			% nw nh px py
  end
} bind def

% Save the original routines so that we can use them later on
/oldfill	/fill load def
/oldeofill	/eofill load def
/oldstroke	/stroke load def
/oldshow	/show load def
/oldashow	/ashow load def
/oldwidthshow	/widthshow load def
/oldawidthshow	/awidthshow load def
/oldkshow	/kshow load def

% These defs are necessary so that subsequent procs don't bind in
% the originals
/fill	   { oldfill } bind def
/eofill	   { oldeofill } bind def
/stroke	   { oldstroke } bind def
/show	   { oldshow } bind def
/ashow	   { oldashow } bind def
/widthshow { oldwidthshow } bind def
/awidthshow { oldawidthshow } bind def
/kshow 	   { oldkshow } bind def
/PATredef {
  MyAppDict begin
    {
    /fill { /clip load PATdraw newpath } bind def
    /eofill { /eoclip load PATdraw newpath } bind def
    /stroke { PATstroke } bind def
    /show { 0 0 null 0 0 6 -1 roll PATawidthshow } bind def
    /ashow { 0 0 null 6 3 roll PATawidthshow }
    bind def
    /widthshow { 0 0 3 -1 roll PATawidthshow }
    bind def
    /awidthshow { PATawidthshow } bind def
    /kshow { PATkshow } bind def
  } {
    /fill   { oldfill } bind def
    /eofill { oldeofill } bind def
    /stroke { oldstroke } bind def
    /show   { oldshow } bind def
    /ashow  { oldashow } bind def
    /widthshow { oldwidthshow } bind def
    /awidthshow { oldawidthshow } bind def
    /kshow  { oldkshow } bind def
    } ifelse
  end
} bind def
false PATredef
% Conditionally define setcmykcolor if not available
/setcmykcolor where { pop } {
  /setcmykcolor {
    1 sub 4 1 roll
    3 {
	3 index add neg dup 0 lt { pop 0 } if 3 1 roll
    } repeat
    setrgbcolor - pop
  } bind def
} ifelse
/PATsc {		% colorarray
  aload length		% c1 ... cn length
    dup 1 eq { pop setgray } { 3 eq { setrgbcolor } { setcmykcolor
  } ifelse } ifelse
} bind def
/PATsg {		% dict
  begin
    lw setlinewidth
    lc setlinecap
    lj setlinejoin
    ml setmiterlimit
    ds aload pop setdash
    cc aload pop setrgbcolor
    cm setmatrix
  end
} bind def

/PATDict 3 dict def
/PATsp {
  true PATredef
  PATDict begin
    /CurrentPattern exch def
    % If it's an uncolored pattern, save the color
    CurrentPattern /PaintType get 2 eq {
      /PColor exch def
    } if
    /CColor [ currentrgbcolor ] def
  end
} bind def
% PATstroke - stroke with the current pattern
/PATstroke {
  countdictstack
  save
  mark
  {
    currentpoint strokepath moveto
    PATpcalc				% proc nw nh px py
    clip newpath PATfill
    } stopped {
	(*** PATstroke Warning: Path is too complex, stroking
	  with gray) =
    cleartomark
    restore
    countdictstack exch sub dup 0 gt
	{ { end } repeat } { pop } ifelse
    gsave 0.5 setgray oldstroke grestore
  } { pop restore pop } ifelse
  newpath
} bind def
/PATtcalc {		% modmtx tilingtype PATtcalc tilematrix
  % Note: tiling types 2 and 3 are not supported
  gsave
    exch concat					% tilingtype
    matrix currentmatrix exch			% cmtx tilingtype
    % Tiling type 1 and 3: constant spacing
    2 ne {
	% Distort the pattern so that it occupies
	% an integral number of device pixels
	dup 4 get exch dup 5 get exch		% tx ty cmtx
	XStep 0 dtransform
	round exch round exch			% tx ty cmtx dx.x dx.y
	XStep div exch XStep div exch		% tx ty cmtx a b
	0 YStep dtransform
	round exch round exch			% tx ty cmtx a b dy.x dy.y
	YStep div exch YStep div exch		% tx ty cmtx a b c d
	7 -3 roll astore			% { a b c d tx ty }
    } if
  grestore
} bind def
/PATusp {
  false PATredef
  PATDict begin
    CColor PATsc
  end
} bind def

% right30
11 dict begin
/PaintType 1 def
/PatternType 1 def
/TilingType 1 def
/BBox [0 0 1 1] def
/XStep 1 def
/YStep 1 def
/PatWidth 1 def
/PatHeight 1 def
/Multi 2 def
/PaintData [
  { clippath } bind
  { 32 16 true [ 32 0 0 -16 0 16 ]
	{<00030003000c000c0030003000c000c0030003000c000c00
	30003000c000c00000030003000c000c0030003000c000c0
	030003000c000c0030003000c000c000>}
     imagemask } bind
] def
/PaintProc {
	pop
	exec fill
} def
currentdict
end
/P2 exch def

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
 /DrawEllipse {
	/endangle exch def
	/startangle exch def
	/yrad exch def
	/xrad exch def
	/y exch def
	/x exch def
	/savematrix mtrx currentmatrix def
	x y tr xrad yrad sc 0 0 1 startangle endangle arc
	closepath
	savematrix setmatrix
	} def

/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def

$F2psBegin
10 setmiterlimit
 0.06000 0.06000 sc
%
% Fig objects follow
%
% Polyline
1 slc
n 1889 54 m 3500 54 l 3500 3346 l 1889 3346 l
 cp gs /PC [[1.00 1.00 1.00] [0.55 0.56 0.55]] def
15.00 15.00 sc P2 [16 0 0 -8 125.93 3.60] PATmp PATsp ef gr PATusp 
7.500 slw
 [45 22 15 22] 0 sd
% Ellipse
n 1878 1671 1483 1483 0 360 DrawEllipse gs col0 s gr
 [] 0 sd
% Arc
0 slc
gs  clippath
2371 1267 m 2321 1316 l 2387 1383 l 2363 1309 l 2437 1334 l cp
2484 1672 m 2554 1667 l 2546 1573 l 2517 1646 l 2476 1578 l cp
eoclip
n 2058.0 1652.6 460.0 0.3 -49.5 arcn
gs col0 s gr
 gr

% arrowhead
n 2437 1334 m 2363 1309 l 2387 1383 l 2437 1334 l  cp gs 0.00 setgray ef gr  col0 s
% arrowhead
n 2476 1578 m 2517 1646 l 2546 1573 l 2476 1578 l  cp gs 0.00 setgray ef gr  col0 s
% Arc
gs  clippath
1355 2062 m 1405 2013 l 1339 1946 l 1364 2021 l 1289 1995 l cp
1242 1657 m 1172 1662 l 1180 1756 l 1210 1684 l 1250 1751 l cp
eoclip
n 1669.0 1677.4 460.0 -179.7 130.5 arcn
gs col0 s gr
 gr

% arrowhead
n 1289 1995 m 1364 2021 l 1339 1946 l 1289 1995 l  cp gs 0.00 setgray ef gr  col0 s
% arrowhead
n 1250 1751 m 1210 1684 l 1180 1756 l 1250 1751 l  cp gs 0.00 setgray ef gr  col0 s
% Arc
gs  clippath
1405 1298 m 1355 1249 l 1289 1316 l 1364 1291 l 1339 1365 l cp
1172 1649 m 1242 1654 l 1250 1560 l 1210 1628 l 1180 1555 l cp
eoclip
n 1669.0 1634.6 460.0 179.7 -130.5 arc
gs col0 s gr
 gr

% arrowhead
n 1339 1365 m 1364 1291 l 1289 1316 l 1339 1365 l  cp gs 0.00 setgray ef gr  col0 s
% arrowhead
n 1180 1555 m 1210 1628 l 1250 1560 l 1180 1555 l  cp gs 0.00 setgray ef gr  col0 s
/Symbol ff 150.00 scf sf
2578 1411 m
gs 1 -1 sc (p) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 150.00 scf sf
2653 1486 m
gs 1 -1 sc (/n) dup sw pop 2 div neg 0 rm  col0 sh gr
/Symbol ff 150.00 scf sf
1068 1920 m
gs 1 -1 sc (p) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 150.00 scf sf
1143 1995 m
gs 1 -1 sc (/n) dup sw pop 2 div neg 0 rm  col0 sh gr
% Polyline
15.000 slw
gs  clippath
1911 -185 m 1840 -185 l 1840 -12 l 1876 -153 l 1911 -12 l cp
eoclip
n 1876 3355 m
 1876 -170 l gs col0 s gr gr

% arrowhead
7.500 slw
n 1911 -12 m 1876 -153 l 1840 -12 l 1911 -12 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
15.000 slw
gs  clippath
3713 1694 m 3713 1623 l 3541 1623 l 3682 1659 l 3541 1694 l cp
eoclip
n 173 1659 m
 3698 1659 l gs col0 s gr gr

% arrowhead
7.500 slw
n 3541 1694 m 3682 1659 l 3541 1623 l 3541 1694 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
 [15 30] 30 sd
n 1874 1647 m
 3073 774 l gs col0 s gr  [] 0 sd
% Polyline
 [15 30] 30 sd
n 1873 1647 m
 2330 236 l gs col0 s gr  [] 0 sd
% Polyline
 [15 30] 30 sd
n 1872 1647 m
 1412 237 l gs col0 s gr  [] 0 sd
% Polyline
 [15 30] 30 sd
n 1871 1648 m
 670 778 l gs col0 s gr  [] 0 sd
% Polyline
 [15 30] 30 sd
n 1871 1650 m
 673 2523 l gs col0 s gr  [] 0 sd
% Polyline
 [15 30] 30 sd
n 1872 1651 m
 1416 3061 l gs col0 s gr  [] 0 sd
% Polyline
 [15 30] 30 sd
n 1873 1651 m
 2333 3060 l gs col0 s gr  [] 0 sd
% Polyline
 [15 30] 30 sd
n 1874 1651 m
 3075 2520 l gs col0 s gr  [] 0 sd
/Symbol ff 180.00 scf sf
3750 1700 m
gs 1 -1 sc (a) col0 sh gr
/Symbol ff 180.00 scf sf
1876 -245 m
gs 1 -1 sc (w) col0 sh gr
/Times-Roman ff 180.00 scf sf
1876 -245 m
gs 1 -1 sc (j) dup sw pop neg 0 rm  col0 sh gr
% Polyline
1 slc
30.000 slw
n 1338 3174 m
 1488 3024 l gs col1 s gr 
% Polyline
n 1338 3024 m
 1488 3174 l gs col1 s gr 
% Polyline
n 587 2608 m
 737 2458 l gs col1 s gr 
% Polyline
n 587 2458 m
 737 2608 l gs col1 s gr 
% Polyline
n 324 1738 m
 474 1588 l gs col1 s gr 
% Polyline
n 324 1588 m
 474 1738 l gs col1 s gr 
% Polyline
n 618 704 m
 768 854 l gs col1 s gr 
% Polyline
n 618 854 m
 768 704 l gs col1 s gr 
% Polyline
n 1348 319 m
 1498 169 l gs col1 s gr 
% Polyline
n 1348 169 m
 1498 319 l gs col1 s gr 
% Polyline
n 2248 319 m
 2398 169 l gs col4 s gr 
% Polyline
n 2248 169 m
 2398 319 l gs col4 s gr 
% Polyline
n 2998 849 m
 3148 699 l gs col4 s gr 
% Polyline
n 2998 699 m
 3148 849 l gs col4 s gr 
% Polyline
n 3278 1739 m
 3428 1589 l gs col4 s gr 
% Polyline
n 3278 1589 m
 3428 1739 l gs col4 s gr 
% Polyline
n 3018 2459 m
 3168 2609 l gs col4 s gr 
% Polyline
n 3018 2609 m
 3168 2459 l gs col4 s gr 
% Polyline
n 2273 3159 m
 2423 3009 l gs col4 s gr 
% Polyline
n 2273 3009 m
 2423 3159 l gs col4 s gr 
$F2psEnd
rs
end
