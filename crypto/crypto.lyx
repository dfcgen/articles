#LyX 1.6.5 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass scrartcl
\begin_preamble
\input{all-inc}
\usepackage{multicol}

\setlength{\nomlabelwidth}{5em}
\newcommand {\hex} [1] {\ensuremath{\mathrm{{#1}_{H}}}}

%% \date{\small{\number\day. \space \textit{\month@german} \space \number\year, \space\space $Revision$}}
\date{\small{$Revision$}}
\end_preamble
\use_default_options false
\begin_modules
emphasized
synopsis
\end_modules
\language german
\inputencoding latin1
\font_roman times
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\float_placement !tbh
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_subject "Kryptoalgorithmen"
\pdf_keywords "Hash, MD5, SHA, MAC, ECB, OFB, CBC, CFB, CTR"
\pdf_bookmarks true
\pdf_bookmarksnumbered true
\pdf_bookmarksopen true
\pdf_bookmarksopenlevel 3
\pdf_breaklinks true
\pdf_pdfborder true
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\papersize a4paper
\use_geometry false
\use_amsmath 2
\use_esint 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\branch WITH_APPENDIX
\selected 1
\color #faf0e6
\end_branch
\branch WITH_FEAL
\selected 0
\color #faf0e6
\end_branch
\branch WITH_ESIGN
\selected 1
\color #faf0e6
\end_branch
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language polish
\papercolumns 1
\papersides 2
\paperpagestyle headings
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Version $Id$
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Todo:
\end_layout

\begin_layout Itemize
Begriffe Ciphertext, Cipherblock, Schlüsseltext, Schlüsselblock, Klartext-Block,
 Klartextblock vereinheitlichen
\end_layout

\end_inset


\end_layout

\begin_layout Title
Kryptoalgorithmen
\end_layout

\begin_layout Subject
Eine Auswahl
\end_layout

\begin_layout Author
Copyright 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textcopyright
\backslash
  2007--
\backslash
number
\backslash
year
\backslash
 
\end_layout

\end_inset

 Ralf Hoppe
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FloatList figure

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Branch WITH_APPENDIX
status open

\begin_layout Standard
\begin_inset FloatList table

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset nomencl_print
LatexCommand printnomenclature

\end_inset


\end_layout

\begin_layout Section*
Abkürzungsverzeichnis
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{multicols}{2}
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring MMMM
\noindent
AAL ATM Adaption Layer
\end_layout

\begin_layout Labeling
\labelwidthstring MMMM
\noindent
ASN Abstract Syntax Notation
\end_layout

\begin_layout Labeling
\labelwidthstring MMMM
\noindent
ATM Asynchronous Transfer Mode
\end_layout

\begin_layout Labeling
\labelwidthstring MMMM
\noindent
AUTH Authentication
\end_layout

\begin_layout Labeling
\labelwidthstring MMMM
\noindent
BT Block Type
\end_layout

\begin_layout Labeling
\labelwidthstring MMMM
\noindent
CA Certification Authority
\end_layout

\begin_layout Labeling
\labelwidthstring MMMM
\noindent
CBC Cipher Block Chaining
\end_layout

\begin_layout Labeling
\labelwidthstring MMMM
\noindent
CFB Cipher Feedback
\end_layout

\begin_layout Labeling
\labelwidthstring MMMM
\noindent
CONF Confidentiality
\end_layout

\begin_layout Labeling
\labelwidthstring MMMM
\noindent
CRC Cyclic Redundancy Check
\end_layout

\begin_layout Labeling
\labelwidthstring MMMM
\noindent
CRL Certificate Revocation List
\end_layout

\begin_layout Labeling
\labelwidthstring MMMM
\noindent
D Decrypt, Data
\end_layout

\begin_layout Labeling
\labelwidthstring MMMM
DB Data Block
\end_layout

\begin_layout Labeling
\labelwidthstring MMMM
\noindent
DES Data Encryption Standard
\end_layout

\begin_layout Labeling
\labelwidthstring MMMM
\noindent
DH Diffie-Hellman
\end_layout

\begin_layout Labeling
\labelwidthstring MMMM
\noindent
DSS Data Signature Standard
\end_layout

\begin_layout Labeling
\labelwidthstring MMMM
\noindent
E Encrypt
\end_layout

\begin_layout Labeling
\labelwidthstring MMMM
EB Encoded Block
\end_layout

\begin_layout Labeling
\labelwidthstring MMMM
\noindent
EC Elliptic Curve
\end_layout

\begin_layout Labeling
\labelwidthstring MMMM
\noindent
ECB Electronic Codebook
\end_layout

\begin_layout Labeling
\labelwidthstring MMMM
\noindent
EC/DSA Elliptic Curve Digital Signature Algorithm
\end_layout

\begin_layout Labeling
\labelwidthstring MMMM
\noindent
EC/KAS Elliptic Curve Key Agreement Scheme
\end_layout

\begin_layout Labeling
\labelwidthstring MMMM
EM Encoded Message
\end_layout

\begin_layout Labeling
\labelwidthstring MMMM
\noindent
FB Feedback
\end_layout

\begin_layout Labeling
\labelwidthstring MMMM
\noindent
FEAL Fast Data Encipherment Algorithm
\end_layout

\begin_layout Labeling
\labelwidthstring MMMM
\noindent
HMAC Hashed MAC
\end_layout

\begin_layout Labeling
\labelwidthstring MMMM
\noindent
ICV Integrity Check Values
\end_layout

\begin_layout Labeling
\labelwidthstring MMMM
\noindent
ID Identifier
\end_layout

\begin_layout Labeling
\labelwidthstring MMMM
\noindent
INTEG Integrity
\end_layout

\begin_layout Labeling
\labelwidthstring MMMM
\noindent
ISK Initial Session Key
\end_layout

\begin_layout Labeling
\labelwidthstring MMMM
\noindent
IV Initialisation Vector
\end_layout

\begin_layout Labeling
\labelwidthstring MMMM
\noindent
LFSR Linear Feedback Shift Register
\end_layout

\begin_layout Labeling
\labelwidthstring MMMM
\noindent
LSB Least Significant Bit
\end_layout

\begin_layout Labeling
\labelwidthstring MMMM
\noindent
MAC Message Authentication Code
\end_layout

\begin_layout Labeling
\labelwidthstring MMMM
\noindent
MD5 Message Digest 5
\end_layout

\begin_layout Labeling
\labelwidthstring MMMM
\noindent
MSB Most Significant Bit
\end_layout

\begin_layout Labeling
\labelwidthstring MMMM
OAEP Optimal Asymmetric Encryption Padding
\end_layout

\begin_layout Labeling
\labelwidthstring MMMM
\noindent
OID Object Identifier
\end_layout

\begin_layout Labeling
\labelwidthstring MMMM
\noindent
OUI Organizationally Unique Identifier
\end_layout

\begin_layout Labeling
\labelwidthstring MMMM
\noindent
PDU Protocol Data Unit 
\end_layout

\begin_layout Labeling
\labelwidthstring MMMM
\noindent
PKCS Public Key Cryptographic Standards
\end_layout

\begin_layout Labeling
\labelwidthstring MMMM
\noindent
PS Padding String
\end_layout

\begin_layout Labeling
\labelwidthstring MMMM
\noindent
QoS Quality of Service
\end_layout

\begin_layout Labeling
\labelwidthstring MMMM
\noindent
RNG Random Number Generator
\end_layout

\begin_layout Labeling
\labelwidthstring MMMM
\noindent
RSA 
\noun on
Rivest
\noun default
-
\noun on
Shamir
\noun default
-
\noun on
Adleman
\end_layout

\begin_layout Labeling
\labelwidthstring MMMM
\noindent
SHA Secure Hash Algorithm
\end_layout

\begin_layout Labeling
\labelwidthstring MMMM
\noindent
SN Sequence Number
\end_layout

\begin_layout Labeling
\labelwidthstring MMMM
\noindent
SV State Vector
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{multicols}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Symmetrische Algorithmen
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sec:crypto_block_ciphers"

\end_inset

Blockchiffren
\begin_inset Index
status collapsed

\begin_layout Plain Layout
Blockchiffren|(
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Einordnung
\end_layout

\begin_layout Standard

\noun on
C.E.
\begin_inset space ~
\end_inset

Shannon
\noun default
 beschreibt in
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Shannon:Secrecy:1949"

\end_inset

 ein allgemeines (symmetrisches
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Symmetrisch deshalb, weil für Ver- und Entschlüsselung derselbe Schlüssel
 
\begin_inset Formula $K$
\end_inset

 zur Anwendung kommt.
 Der schraffierte Bereich in Abbildung
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:shannon_model"

\end_inset

 wurde hinzugefügt um den unsicheren Kanal zu markieren.
 Damit wird auch die Aussage anschaulich, daß der Schlüssel 
\begin_inset Formula $K$
\end_inset

 auf sicherem Wege zum Empfänger gelangen muß.
\end_layout

\end_inset

) Kryptosystem entsprechend Abbildung
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:shannon_model"

\end_inset

 und formuliert auf dieser Grundlage erstmalig grundlegende Theoreme zur
 theoretischen Sicherheit.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename cryptosystem.eps

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout

\noun on
\begin_inset CommandInset label
LatexCommand label
name "fig:shannon_model"

\end_inset

Shannon
\noun default
's Modell
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In Teil
\begin_inset space ~
\end_inset

III widmet er sich auch praktischen Aspekten der Auswahl 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
resp
\end_layout

\end_inset

 des Designs solcher Verschlüsselungsalgorithmen.
 Dabei bezieht er sich unter anderem auf die folgenden Kriterien zur Bewertung
 von Kryptosystemen:
\end_layout

\begin_layout Itemize
die benötigte Menge an Kryptomaterial für einen erfolgreichen Angriff;
\end_layout

\begin_layout Itemize
die Schlüssellänge;
\end_layout

\begin_layout Itemize
die Komplexität
\begin_inset Index
status collapsed

\begin_layout Plain Layout
Komplexität
\end_layout

\end_inset

 des Ver- und Entschlüsselungsalgorithmus';
\end_layout

\begin_layout Itemize
die Fehlerfortpflanzung
\begin_inset Index
status collapsed

\begin_layout Plain Layout
Fehlerfortpflanzung
\end_layout

\end_inset

;
\end_layout

\begin_layout Itemize
und das (nicht) notwendige Padding
\begin_inset Index
status collapsed

\begin_layout Plain Layout
Padding
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsubsection
Wirkprinzip
\end_layout

\begin_layout Standard
Blockchiffren zeichnen sich dadurch aus, daß sie einen Klartext-Vektor (Plaintex
t) der Breite 
\begin_inset Formula $n$
\end_inset

 (Bit) in einen gleichgroßen Vektor verschlüsselte Daten (Ciphertext) transformi
eren.
 Diese Abbildung 
\begin_inset Formula $E$
\end_inset

 von 
\begin_inset Formula $2^{n}$
\end_inset

 möglichen Eingangsmustern auf wieder 
\begin_inset Formula $2^{n}$
\end_inset

 Ausgangsmuster ist praktisch immer eineindeutig (affin, reversibel) und
 wird durch den geheimen Schlüssel 
\begin_inset Formula $K$
\end_inset

 gesteuert.
 Besteht der Klartext wie in Abbildung
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:blockcipher_segmentation"

\end_inset

 aus mehr Bits als die Blockbreite 
\begin_inset Formula $n$
\end_inset

 vorgibt, dann muß er in Teilblöcke dieser Breite segmentiert und der letzte
 Block unter Umständen mit einem Muster 
\emph on
pad
\emph default
(ding)
\begin_inset Index
status collapsed

\begin_layout Plain Layout
Padding
\end_layout

\end_inset

 aufgefüllt werden.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename blockcipher.eps

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:blockcipher_segmentation"

\end_inset

Anwendung von Blockchiffren
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Die Klartext-Blöcke 
\begin_inset Formula $p_{i}$
\end_inset

 werden dann nacheinander durch den Algorithmus 
\begin_inset Formula $E$
\end_inset

 in Ciphertext-Blöcke 
\begin_inset Formula $c_{i}=E(p_{i})$
\end_inset

 transformiert.
 Dieser Prozeß kann vollständig unabhängig für jede Blockchiffre (
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
resp
\end_layout

\end_inset

 jeden Block 
\begin_inset Formula $p_{i}$
\end_inset

) ablaufen
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
In diesem Fall spielt die Reihenfolge der Verschlüsselung der einzelnen
 Blöcke 
\begin_inset Formula $p_{i}$
\end_inset

 keine Rolle.
\end_layout

\end_inset

 oder aber durch die Weitergabe von Zustandsvektoren 
\emph on

\begin_inset Formula $s_{i}$
\end_inset


\emph default
 beeinflußt sein
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
In diesem Fall müßte man, um die Unterschiede in den einzelnen Schritten
 kenntlich zu machen, eigentlich 
\begin_inset Formula $E_{i}$
\end_inset

 statt einfach nur 
\begin_inset Formula $E$
\end_inset

 schreiben.
 Darauf wurde jedoch verzichtet, weil das Subskript an 
\begin_inset Formula $E$
\end_inset

 üblicherweise für den verwendeten Schlüssel reserviert ist, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
eg
\end_layout

\end_inset

 so: 
\begin_inset Formula $c_{i}=E_{K}(p_{i})$
\end_inset

.
\end_layout

\end_inset

.
 Den ersten Zustandsvektor nennt man Initialisierungsvektor (IV) und wählt
 ihn entweder zufällig (dann muß er zum Ort der Entschlüsselung übertragen
 werden) oder per Vereinbarung, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
eg
\end_layout

\end_inset

 als statisches Muster.
 Bei der Entschlüsselung läuft der gesamte Prozeß umgekehrt ab, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ie
\end_layout

\end_inset

 derselbe Schlüssel 
\begin_inset Formula $K$
\end_inset

 wird verwendet um mit Hilfe des inversen Algorithmus jeden Klartext-Block
 
\begin_inset Formula $p_{i}=E^{-1}(c_{i})$
\end_inset

 wieder zu gewinnen.
\end_layout

\begin_layout Subsubsection
Herkömmliche Struktur
\end_layout

\begin_layout Standard

\noun on
Shannon
\noun default
 hat schon in
\begin_inset space ~
\end_inset

 vorgeschlagen symmetrische Kryptoalgorithmen durch Anwendung von Substitution
 (als nichtlineare Komponente) und Permutation zu realisieren.
 Fast alle bekannten Blockchiffren wenden dieses Prinzip auf der Grundlage
 einer einfachen Verarbeitungsstruktur nach 
\noun on
H.
\begin_inset space ~
\end_inset

Feistel
\noun default
 
\begin_inset Index
status open

\begin_layout Plain Layout
Feistel-Netzwerk@
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noun{Feistel}
\end_layout

\end_inset

-Netzwerk
\end_layout

\end_inset

 an
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Feistel:1975"

\end_inset

.
 Dazu wird der Plaintext-Block 
\begin_inset Formula $p$
\end_inset

 in zwei Hälften 
\begin_inset Formula $l_{0}$
\end_inset

 und 
\begin_inset Formula $r_{0}$
\end_inset

 aufgeteilt (
\begin_inset Formula $p=l_{0}||r_{0}$
\end_inset

) und an das Feistel-Netzwerk nach Abbildung
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:feistel_network"

\end_inset

 übergeben.
 Das Ergebnis 
\begin_inset Formula $l_{1}||r_{1}$
\end_inset

 wird danach wieder auf den Eingang zurückgeführt und das Verfahren in mehreren
 Runden wiederholt.
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
prefix "~"
symbol "$\\oplus$"
description "Exklusiv-Oder (Modulo-2, XOR)"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \begin{xalignat}{2}
l_{i+1} & =r_{i} & r_{i+1} & =l_{i}\oplus f(r_{i},K_{i})\label{eq:crypto_feistel}\end{xalignat}

\end_inset


\end_layout

\begin_layout Standard
Der sogenannte Rundschlüssel 
\begin_inset Formula $K_{i}$
\end_inset

 wird aus dem Schlüssel 
\begin_inset Formula $K$
\end_inset

 abgeleitet (Key Scheduling) und sollte für jede Runde verschieden sein.
 Die nichtlineare Funktion 
\begin_inset Formula $f$
\end_inset

 realisiert dabei die Substitution (in Abhängigkeit vom Rundenschlüssel),
 die ständige Kreuzung von linker und rechter Hälfte zusammen mit der Exklusiv-O
der (XOR) Operation eine reversible
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Operationen die zu einem Informationsverlust führen (And, Or, \SpecialChar \ldots{}
) müssen an
 dieser Stelle vermieden werden.
\end_layout

\end_inset

 Permutation (und 
\begin_inset Quotes pld
\end_inset

Durchmischung
\begin_inset Quotes prd
\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename feistel.eps

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:feistel_network"

\end_inset

Runde einer typischen 
\noun on
Feistel
\noun default
-Chiffre
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Die Vorteile des Verfahrens gründen sich auf dessen Einfachheit:
\end_layout

\begin_layout Enumerate
Aufwand und Kosten der Realisierung sind überschaubar;
\end_layout

\begin_layout Enumerate
Hardware- und Software-Implementierungen sind gleichermaßen möglich;
\end_layout

\begin_layout Enumerate
die Skalierbarkeit (nach Sicherheitsanforderungen, Geschwindigkeit oder
 anderen Kriterien) ist durch Variation der Rundenanzahl gegeben;
\end_layout

\begin_layout Enumerate
Ver- und Entschlüsselung können dieselbe Struktur verwenden.
\end_layout

\begin_layout Standard
Der letzte Punkt soll noch kurz erläutert werden, wobei von Formel
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "eq:crypto_feistel"

\end_inset

 auszugehen ist.
 Stellen wir diese einfach für die Rückwärtsrichtung (Entschlüsselung) um,
 so ergibt sich:
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{xalignat}{2}
r_{i} & =l_{i+1} & l_{i} & =r_{i+1}\oplus f(l_{i+1},K_{i}),\label{eq:crypto_feistel_reverse}\end{xalignat}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ie
\end_layout

\end_inset

 alle Operationen bleiben erhalten
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Insbesondere wird eine Umkehrfunktion 
\begin_inset Formula $f^{-1}$
\end_inset

 nicht benötigt.
\end_layout

\end_inset

.
 Was sich ändert ist einzig und allein die Verwendung der Rundenschlüssel,
 welche bei der Verschlüsselung mit 
\begin_inset Formula $K_{0}$
\end_inset

 startete.
 Bei der Entschlüsselung muß man, wie Formel
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "eq:crypto_feistel_reverse"

\end_inset

 zeigt, umgekehrt vorgehen, also den Schlüssel 
\begin_inset Formula $K_{0}$
\end_inset

 zuletzt benutzen.
\end_layout

\begin_layout Subsubsection
Advanced Encryption Algorithm (AES)
\end_layout

\begin_layout Standard
Der AES ist definiert im NIST-Standard
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "FIPS:197"

\end_inset

 und mittlerweile auch als
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "ISO:18033-3"

\end_inset

.
 Es gibt so viele Beschreibungen und Implementierungshinweise zum AES, daß
 ich dies hier nicht weiter ausführe.
\end_layout

\begin_layout Standard
\begin_inset Note Comment
status open

\begin_layout Paragraph
Substitution (SubBytes)
\end_layout

\begin_layout Paragraph
Permutation (ShiftRows)
\end_layout

\begin_layout Paragraph
Diffusion (MixColumns)
\end_layout

\begin_layout Plain Layout
Stellt einen weiteren Durchmischungsschritt dar, welcher die (jeweils) vier
 Elemente einer Spalte der Zustandmatrix in Beziehung setzt.
 Dazu werden sie als Koeffizienten von Polynomen im Restklassenkörper 
\begin_inset Formula $\GF(2^{8})$
\end_inset

 aufgefaßt, auf die folgende Operation angewendet wird:
\end_layout

\begin_layout Plain Layout
\begin_inset Formula \[
s^{\prime}(x)=a(x)\otimes s(x)=a(x)\cdot s(x)\bmod(x^{4}+1)\mperiod\]

\end_inset


\end_layout

\begin_layout Plain Layout
Die vier neuen Zustandsvariablen 
\begin_inset Formula $s^{\prime}$
\end_inset

 kann man nach 
\begin_inset CommandInset citation
LatexCommand cite
after "5.1.3"
key "FIPS:197"

\end_inset

 auch durch einfache XOR-Operationen aus den alten Werten 
\begin_inset Formula $s$
\end_inset

 gewinnen.
 Dies soll hier kurz nachgewiesen werden, wozu die einzelnen Schritte der
 Multiplikation in 
\begin_inset Formula $\mathbb{F}_{2^{8}}[x]/(x^{4}+1)$
\end_inset

 ausführlich dargestellt sind.
\end_layout

\begin_layout Enumerate
Multiplikation 
\begin_inset Formula $b(x)=a(x)\cdot s(x)$
\end_inset


\end_layout

\begin_deeper
\begin_layout Plain Layout
\begin_inset Formula \[
\begin{split}b(x) & =(a_{3}x^{3}+a_{2}x^{2}+a_{1}x+a_{0})\cdot(s_{3}x^{3}+s_{2}x^{2}+s_{1}x+s_{0})\\
 & =\underbrace{a_{3}s_{3}}_{b_{6}}x^{6}+\underbrace{(a_{2}s_{3}\oplus a_{3}s_{2})}_{b_{5}}x^{5}+\underbrace{(a_{1}s_{3}\oplus a_{2}s_{2}\oplus a_{3}s_{1})}_{b_{4}}x^{4}+\\
 & \quad+\underbrace{(a_{0}s_{3}\oplus a_{1}s_{2}\oplus a_{2}s_{1}\oplus a_{3}s_{0})}_{b_{3}}x^{3}+\underbrace{(a_{0}s_{2}\oplus a_{1}s_{1}\oplus a_{2}s_{0})}_{b_{2}}x^{2}+\underbrace{(a_{0}s_{1}\oplus a_{1}s_{0})}_{b_{1}}x+\underbrace{a_{0}s_{0}}_{b_{0}}\end{split}
\]

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Modulo-Reduktion 
\begin_inset Formula $b(x)\bmod(x^{4}+1)$
\end_inset

 durch Polynomdivision (mit Rest):
\end_layout

\begin_deeper
\begin_layout Plain Layout
\begin_inset Formula \begin{multline*}
\begin{split}(b_{6}x^{6}+b_{5}x^{5}+b_{4}x^{4}+b_{3}x^{3}+b_{2}x^{2}+b_{1}x+b_{0})\bmod(x^{4}+1)=\\
b_{3}x^{3}+(b_{2}\oplus b_{6})x^{2}+(b_{1}\oplus b_{5})x+(b_{0}\oplus b_{4})\end{split}
\end{multline*}

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Vergleich der Koeffizienten in
\end_layout

\begin_deeper
\begin_layout Plain Layout
\begin_inset Formula \[
s^{\prime}(x)=s_{3}^{\prime}x^{3}+s_{2}^{\prime}x^{2}+s_{1}^{\prime}x+s_{0}^{\prime}=b(x)\bmod(x^{4}+1)\]

\end_inset


\end_layout

\begin_layout Plain Layout
mit dem Ergebnis der Modulo-Reduktion zeigt:
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Auffällig daran ist, daß für jedes Byte 
\begin_inset Formula $s_{i}^{\prime}$
\end_inset

 dieselbe Rechnung mit einem rotierenden Vektor 
\begin_inset Formula $\mvec{s}=(s_{3},s_{2},s_{1},s_{0})$
\end_inset

 durchgeführt werden kann.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Formula \begin{alignat*}{2}
s_{0}^{\prime} & =b_{0}\oplus b_{4} &  & =a_{0}s_{0}\oplus a_{1}s_{3}\oplus a_{2}s_{2}\oplus a_{3}s_{1}\\
s_{1}^{\prime} & =b_{1}\oplus b_{5} &  & =a_{0}s_{1}\oplus a_{1}s_{0}\oplus a_{2}s_{3}\oplus a_{3}s_{2}\\
s_{2}^{\prime} & =b_{2}\oplus b_{6} &  & =a_{0}s_{2}\oplus a_{1}s_{1}\oplus a_{2}s_{0}\oplus a_{3}s_{3}\\
s_{3}^{\prime} & =b_{3} &  & =a_{0}s_{3}\oplus a_{1}s_{2}\oplus a_{2}s_{1}\oplus a_{3}s_{0}\mperiod\end{alignat*}

\end_inset


\end_layout

\end_deeper
\begin_layout Plain Layout
Für den AES gelten die konkreten Werte 
\begin_inset Formula $(a_{3},a_{2},a_{1},a_{0}):=(\hex{03},\hex{01},\hex{01},\hex{02})$
\end_inset

 bei der Verschlüsselung und 
\begin_inset Formula $(a_{3},a_{2},a_{1},a_{0}):=(\hex{0B},\hex{0D},\hex{09},\hex{0E})$
\end_inset

 bei der Entschlüsselung.
\end_layout

\begin_layout Paragraph
Rundenschlüssel (AddRoundKey)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Branch WITH_FEAL
status collapsed

\begin_layout Subsubsection
Fast Encryption Algorithm
\end_layout

\begin_layout Standard
\begin_inset Index
status collapsed

\begin_layout Plain Layout
Fast Encryption Algorithm
\end_layout

\end_inset


\begin_inset Index
status collapsed

\begin_layout Plain Layout
FEAL|see
\begin_inset ERT
status open

\begin_layout Plain Layout

{Fast Encryption Algorithm}
\end_layout

\end_inset


\end_layout

\end_inset

FEAL ist ein relativ schneller Kryptoalgorithmus mit einer Blockbreite und
 Schlüssellänge von 64
\begin_inset space ~
\end_inset

Bit
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "miyaguchi:1990"

\end_inset

.
 Vom ATM-Forum 
\begin_inset CommandInset citation
LatexCommand cite
key "ATMF:SecuritySpec:1999"

\end_inset

 wird FEAL entspechend Abbildung
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig_feal_rounds"

\end_inset

 mit 
\begin_inset Formula $N=32$
\end_inset

 Runden (FEAL-32) ohne Paritätsbits eingesetzt.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename feal_round.eps

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig_feal_rounds"

\end_inset

FEAL-Runden
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Im Key Schedule werden 
\begin_inset Formula $N+8=40$
\end_inset

 jeweils 16
\begin_inset space ~
\end_inset

Bit breite Schlüssel erzeugt, von denen 
\begin_inset Formula $N=32$
\end_inset

 auf die einzelnen Runden angewendet werden.
 Die restlichen 8
\begin_inset space ~
\end_inset

Schlüssel dienen der Eingangs- und Ausgangstransformation.
 Die Funktion 
\begin_inset Formula $f$
\end_inset

 verarbeitet immer den rechten Teil
\begin_inset space ~
\end_inset


\begin_inset Formula $R_{i}$
\end_inset

 (32
\begin_inset space ~
\end_inset

Bit Daten) mit Hilfe der 16
\begin_inset space ~
\end_inset

Schlüsselbits
\begin_inset space ~
\end_inset


\begin_inset Formula $K_{i}$
\end_inset

 .
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename feal_func.eps

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig_feal_func"

\end_inset

FEAL-Funktion 
\begin_inset Formula $f$
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Sie ist speziell für die Implementierung auf 8
\begin_inset space ~
\end_inset

Bit-CPUs ausgelegt und in Abbildung
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig_feal_func"

\end_inset

 dargestellt.
 In
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "miyaguchi:1990"

\end_inset

 sind für die Funktion 
\begin_inset Formula $f$
\end_inset

 die folgenden äquivalenten Gleichungen angegeben.
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{eqnarray}
f_{0} & = & S_{0}(\alpha_{0},f_{1})\label{eqn_feal_func}\\
f_{1} & = & S_{1}(\alpha_{0}\oplus\beta_{0}\oplus\alpha_{1},\alpha_{2}\oplus\beta_{1}\oplus\alpha_{3})\nonumber \\
f_{2} & = & S_{0}(\alpha_{2}\oplus\beta_{1}\oplus\alpha_{3},f_{1})\nonumber \\
f_{3} & = & S_{1}(\alpha_{3},f_{2})\nonumber \end{eqnarray}

\end_inset


\end_layout

\begin_layout Standard
Die dabei in den S-Boxen ausgeführte Byte-Operation in Bezug auf die Eingangsgrö
ßen 
\begin_inset Formula $\alpha$
\end_inset

 und 
\begin_inset Formula $\beta$
\end_inset

 ist
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{eqnarray}
S_{0}(\alpha,\beta) & = & \mathrm{Rot}2((\alpha+\beta)\,\mathrm{mod}\,256)\label{eqn_feal_boxes}\\
S_{1}(\alpha,\beta) & = & \mathrm{Rot}2((\alpha+\beta+1)\,\mathrm{mod}\,256)\nonumber \end{eqnarray}

\end_inset

 wobei 
\emph on
Rot2
\emph default
 eine Linksrotation um 2
\begin_inset space ~
\end_inset

Bit darstellen soll.
\end_layout

\begin_layout Standard
Die Erzeugung der Schlüssel 
\begin_inset Formula $K_{0}\ldots K_{39}$
\end_inset

 im 
\emph on
Key Schedule
\emph default
 erfolgt entsprechend Abbildung
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig_feal_keysched"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename feal_keysched.eps

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig_feal_keysched"

\end_inset

FEAL Key Schedule
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Die Funktion 
\begin_inset Formula $f_{K}$
\end_inset

 benutzt dieselben S-Boxen wie die 
\begin_inset Formula $f$
\end_inset

-Funktion und ist, wie die folgenden Gleichungen zeigen, auch von der Komplexitä
t her ähnlich
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Für weitere Details sei auf 
\begin_inset CommandInset citation
LatexCommand cite
after "Fig. 4"
key "miyaguchi:1990"

\end_inset

 oder auch
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "schneier:1996"

\end_inset

, 
\begin_inset CommandInset citation
LatexCommand cite
key "menezes:1997"

\end_inset

 verwiesen.
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{eqnarray*}
f_{K_{0}} & = & S_{0}(\alpha_{0},f_{K_{1}}\oplus\beta_{0})\\
f_{K_{1}} & = & S_{1}(\alpha_{0}\oplus\alpha_{1},\alpha_{2}\oplus\alpha_{3}\oplus\beta_{0})\\
f_{K_{2}} & = & S_{0}(\alpha_{2}\oplus\alpha_{3},f_{K_{1}}\oplus\beta_{1})\\
f_{K_{3}} & = & S_{1}(\alpha_{3},f_{K_{2}}\oplus\beta_{3})\end{eqnarray*}

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sec:crypto_blockcipher_opmodes"

\end_inset

Betriebsarten
\begin_inset Index
status collapsed

\begin_layout Plain Layout
Blockchiffren!Betriebsarten
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Normalerweise bildet eine Blockchiffre 
\begin_inset Formula $n$
\end_inset

 bit Klartext auf die gleiche Anzahl verschlüsselter Bits ab (Electronic
 Codebook, ECB-Modus).
 Betriebsarten, wie im Folgenden beschrieben, verknüpfen die Eingangs- und
 Ausgangsvektoren durch Rückkopplungen mittels modularer Arithmetik.
 Auf diese Weise werden ganz spezielle Eigenschaften erzeugt und kryptoanalytisc
he Nachteile der einen oder anderen Betriebsart umgangen.
 Eine genaue Auflistung der jeweiligen Eigenschaften geben 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
eg
\end_layout

\end_inset

 
\begin_inset CommandInset citation
LatexCommand cite
key "ISO:10116"

\end_inset

, 
\begin_inset CommandInset citation
LatexCommand cite
key "NIST:800-38A"

\end_inset

 sowie
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
after "7.2.2"
key "Menezes:1992"

\end_inset

, historische Spezifikationen der Betriebsarten sind in
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "ANSI:X9.52,FIPS:81"

\end_inset

 zu finden.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sec:cbc"

\end_inset

Cipher Block Chaining (CBC)
\end_layout

\begin_layout Standard
\begin_inset Index
status collapsed

\begin_layout Plain Layout
Blockchiffren!Betriebsarten!CBC
\end_layout

\end_inset


\begin_inset Index
status collapsed

\begin_layout Plain Layout
Cipher Block Chaining (CBC)
\end_layout

\end_inset


\begin_inset Index
status collapsed

\begin_layout Plain Layout
Modes of Operation|see
\begin_inset ERT
status open

\begin_layout Plain Layout

{Blockchiffren}
\end_layout

\end_inset


\end_layout

\end_inset

In der Betriebsart CBC wird jeder Plaintext-Block 
\begin_inset Formula $p_{i}$
\end_inset

 vor der Verschlüsselung mit dem letzten Ciphertext-Block 
\begin_inset Formula $c_{i-1}$
\end_inset

 kombiniert (
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
cf
\end_layout

\end_inset

 auch Abbildung
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:cbc_encipher"

\end_inset

).
\end_layout

\begin_layout Emph(asized)
\begin_inset Formula \begin{xalignat}{3}
c_{i} & =E_{K}(p_{i}\oplus c_{i-1}), & p_{i} & =c_{i-1}\oplus D_{K}(c_{i}), & c_{-1} & ={IV}\label{eq:cbc_recursion}\end{xalignat}

\end_inset


\end_layout

\begin_layout Standard
Dadurch ergibt sich eine Abhängigkeit über den gesamten zu verschlüsselnden
 Klartext, welche 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
eg
\end_layout

\end_inset

 beim CBC-MAC ausgenutzt wird.
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename cbc_encipher.eps

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:cbc_encipher"

\end_inset

CBC-Verschlüsselung
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
An Hand von Abbildung
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:cbc_decipher"

\end_inset

 (oder aus Formel
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "eq:cbc_recursion"

\end_inset

) kann man das Entschlüsselungsverfahren leicht erklären.
 Jeder Block 
\begin_inset Formula $c_{i}$
\end_inset

 wird zuerst entschlüsselt, danach die Exklusiv-Oder (XOR) Operation mit
 Hilfe des 
\begin_inset Quotes eld
\end_inset

Vorgängers
\begin_inset Quotes erd
\end_inset

 
\begin_inset Formula $c_{i-1}$
\end_inset

 rückgängig gemacht
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Da in diesem Modus der Ciphertext direktes Resultat der jeweiligen Blockverschlü
sselung ist, benötigt man (im Gegensatz zu OFB- oder CFB-Modus) für die
 Entschlüsselung den inversen Algorithmus.
\end_layout

\end_inset

.
 Für den ersten Block wird als Startwert ein Initialisierungsvektor (IV)
 verwendet, der auch nicht unbedingt geheim sein muß.
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename cbc_decipher.eps

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:cbc_decipher"

\end_inset

CBC-Entschlüsselung
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Die Eigenschaften des CBC-Modus bezüglich der Fehlerfortpflanzung
\begin_inset Index
status collapsed

\begin_layout Plain Layout
Fehlerfortpflanzung
\end_layout

\end_inset

 lassen sich entweder aus Abbildung
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:cbc_decipher"

\end_inset

 oder aber Formel
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "eq:cbc_recursion"

\end_inset

 ableiten:
\end_layout

\begin_layout Enumerate
Bitfehler im Block 
\begin_inset Formula $c_{i}$
\end_inset

 wirken sich auf den aktuellen sowie den nächsten Klartext-Block aus.
 Wegen 
\begin_inset Formula $p_{i}=c_{i-1}\oplus D_{K}(c_{i})$
\end_inset

 sind in 
\begin_inset Formula $p_{i}$
\end_inset

 nahezu alle Bits verfälscht
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Der Fehler in 
\begin_inset Formula $c_{i}$
\end_inset

 geht als Eingangsvektor in den Entschlüsselungsalgorithmus 
\begin_inset Formula $D_{K}$
\end_inset

 ein und führt so dazu, daß 50% der Bits des Ausgangsvektors fehlerbehaftet
 sind.
\end_layout

\end_inset

.
 In 
\begin_inset Formula $p_{i+1}=c_{i}\oplus D_{K}(c_{i+1})$
\end_inset

 hingegen sind es nur solche, die auch in 
\begin_inset Formula $c_{i}$
\end_inset

 fehlerhaft waren.
 War deren Anzahl 
\begin_inset Formula $m$
\end_inset

 so führt die Fehlerfortpflanzung zu 
\begin_inset Formula $n+m$
\end_inset

 verfälschten Bits.
\end_layout

\begin_layout Enumerate
Geht die Blocksynchronisation verloren, 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
ie
\end_layout

\end_inset

 wird beispielsweise der Block 
\begin_inset Formula $c_{1}$
\end_inset

 in Abbildung
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:cbc_decipher"

\end_inset

 gar nicht erst empfangen (und an dessen Stelle 
\begin_inset Formula $c_{2}$
\end_inset

 verwendet), so wird der zugeordnete entschlüsselte Block 
\begin_inset Formula $p_{2}$
\end_inset

 (jetzt an Stelle von 
\begin_inset Formula $p_{1}$
\end_inset

) komplett gestört sein.
 Alle weiteren Blöcke sind jedoch wieder korrekt
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Wobei 
\begin_inset Formula $p_{1}$
\end_inset

 natürlich trotzdem fehlt (denn 
\begin_inset Formula $c_{1}$
\end_inset

 wurde ja nicht empfangen), was für praktische Anwendungen schon ein schweres
 Problem darstellt.
\end_layout

\end_inset

, weshalb man auch von einer selbstsynchronisierenden Betriebsart spricht
 (self-synchronizing, ciphertext autokey).
\begin_inset Index
status collapsed

\begin_layout Plain Layout
Selbstsynchronisation
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Ohne Maßnahmen zur Blocksynchronisation bewirken eingefügte oder verlorene
 Bits, daß auch alle weiteren Klartext-Blöcke fehlerhaft sind
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Dieses Verhalten gilt für alle blockorientierten Verschlüsselungsalgorithmen.
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sec_cfb_mode"

\end_inset

Cipher Feedback (CFB)
\end_layout

\begin_layout Standard
\begin_inset Index
status collapsed

\begin_layout Plain Layout
CFB-Modus
\end_layout

\end_inset


\begin_inset Index
status collapsed

\begin_layout Plain Layout
DES-Modus CFB
\end_layout

\end_inset

Im Gegensatz zum CBC-Modus (siehe Abschnitt
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:cbc"

\end_inset

) geht der Klartext bei dieser Betriebsart weder direkt noch indirekt über
 den Verschlüsselungsalgorithmus 
\begin_inset Formula $E_{K}$
\end_inset

.
\end_layout

\begin_layout Emph(asized)
\begin_inset Formula \begin{xalignat}{3}
c_{i} & =p_{i}\oplus E_{K}(c_{i-1}), & p_{i} & =c_{i}\oplus E_{K}(c_{i-1}), & E_{K}(c_{-1}) & =\mbox{IV}\label{eq:cfb_recursion}\end{xalignat}

\end_inset


\end_layout

\begin_layout Standard
Aus diesem Grund wird die inverse Operation zwar nicht benötigt, die Eigenschaft
en der CFB-Betriebsart sind aber trotzdem vergleichbar zum CBC:
\end_layout

\begin_layout Enumerate
sie ist selbstsynchronisierend;
\end_layout

\begin_layout Enumerate
hat eine beschränkte Fehlerfortpflanzung und
\end_layout

\begin_layout Enumerate
ist (zusätzlich) für Blockbreiten kleiner der des Algorithmus geeignet.
\end_layout

\begin_layout Standard
Die ersten beiden Punkte lassen sich aus den Blockbildern
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:cfb_encipher"

\end_inset

 und
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:cfb_decipher"

\end_inset

 erkennen oder über Formel
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "eq:cfb_recursion"

\end_inset

 verifizieren.
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename cfb_encipher.eps

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:cfb_encipher"

\end_inset

CFB-Verschlüsselung
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename cfb_decipher.eps

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:cfb_decipher"

\end_inset

CFB-Entschlüsselung
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Wegen der Rückführung des Ciphertextes wirkt sich ein Empfangsfehler
\begin_inset Index
status collapsed

\begin_layout Plain Layout
Fehlerfortpflanzung
\end_layout

\end_inset

 im Block 
\begin_inset Formula $c_{i}$
\end_inset

 nur auf den aktuellen Klartext 
\begin_inset Formula $p_{i}=c_{i}\oplus E_{K}(c_{i-1})$
\end_inset

 und den darauffolgenden Block 
\begin_inset Formula $p_{i+1}=c_{i+1}\oplus E_{K}(c_{i})$
\end_inset

 aus.
 In 
\begin_inset Formula $p_{i+2}=c_{i+2}\oplus E_{K}(c_{i+1})$
\end_inset

 ist kein Einfluß von 
\begin_inset Formula $c_{i}$
\end_inset

 gegeben, weshalb (wie im CBC-Modus) ein Fehlerburst von 
\begin_inset Formula $m$
\end_inset

 Bits durch diese Art der Rückführung zu 
\begin_inset Formula $n+m$
\end_inset

 fehlerhaften Bits verbreitert wird.
 
\end_layout

\begin_layout Paragraph
Blockbreitenreduktion (Fall 
\begin_inset Formula $r<n$
\end_inset

)
\end_layout

\begin_layout Standard
Die Betriebsart CFB ist auch für Nachrichtenblöcke geeignet, deren Anzahl
 von Bits 
\begin_inset Formula $r$
\end_inset

 kleiner als die Blockbreite 
\begin_inset Formula $n$
\end_inset

 des Algorithmus ist.
 Man benutzt in diesem Fall einfach nur die ersten 
\begin_inset Formula $r$
\end_inset

 Output-Bits des Algorithmus, muß jedoch im Eingangsvektor die restlichen
 
\begin_inset Formula $n-r$
\end_inset

 Bits auf einen konstanten Wert setzen (in
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "ISO:10116"

\end_inset

 auf 
\begin_inset Quotes eld
\end_inset

1
\begin_inset Quotes erd
\end_inset

, 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
cf
\end_layout

\end_inset

 Abbildung
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:cfb_short"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Verschlüsselung
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename cfb_encipher_short.eps
	width 45col%
	keepAspectRatio

\end_inset


\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Entschlüsselung
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename cfb_decipher_short.eps
	width 45col%
	keepAspectRatio

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:cfb_short"

\end_inset

CFB mit verringerter Blockbreite
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Pipelining
\begin_inset Index
status collapsed

\begin_layout Plain Layout
Pipelining
\end_layout

\end_inset

 (Fall 
\begin_inset Formula $r>n$
\end_inset

)
\end_layout

\begin_layout Standard
Bei Einsatz eines Feedback (FB) Registers im Rückkopplungszweig wird es
 möglich den Kryptoalgorithmus zu parallelisieren
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Pipelining läßt sich auch mit dem Verfahren bei reduzierter Blockbreite
 (
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
cf
\end_layout

\end_inset

 Abbildung
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:cfb_short"

\end_inset

) kombinieren.
\end_layout

\end_inset

.
 Man geht dazu wie in Abbildung
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:cfb_pipeline"

\end_inset

 skizziert vor.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Verschlüsselung
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename cfb_encipher_pipeline.eps
	width 45col%
	keepAspectRatio

\end_inset


\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Entschlüsselung
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename cfb_decipher_pipeline.eps
	width 45col%
	keepAspectRatio

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:cfb_pipeline"

\end_inset

CFB mit Pipelining
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Die damit einhergehende Verzögerung verschleppt allerdings auch die Auswirkung
 von Bitfehlern, was oftmals unerwünscht ist.
 Denn, sollte ein empfangener Cipherblock fehlerhaft sein, so wirkt sich
 dies auf den aktuellen und den 
\begin_inset Formula $k$
\end_inset

-ten darauffolgenden Block aus (wenn mit 
\begin_inset Formula $k$
\end_inset

 die Tiefe des FB bezeichnet wird).
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sec_ofb_mode"

\end_inset

Output Feedback (OFB)
\end_layout

\begin_layout Standard
\begin_inset Index
status collapsed

\begin_layout Plain Layout
OFB-Modus
\end_layout

\end_inset


\begin_inset Index
status collapsed

\begin_layout Plain Layout
DES-Modus OFB
\end_layout

\end_inset

Auch in der Betriebsart OFB ist man prinzipiell in der Lage Blockbreiten
 
\begin_inset Formula $r<n$
\end_inset

 zu verarbeiten, verliert aber die Eigenschaft der Selbstsynchronisation.
 Das Prinzip dieser Betriebsart besteht darin, daß sowohl auf Sende- als
 auch Empfangsseite der gleiche (Pseudozufalls-) Strom 
\begin_inset Formula $e_{i}$
\end_inset

 erzeugt und dann direkt zum Ver- 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
resp
\end_layout

\end_inset

 Entschlüsseln verwendet wird (siehe XOR-Operation in Abbildung
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:ofb"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Verschlüsselung
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename ofb_encipher.eps
	width 45col%

\end_inset


\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset

 
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Entschlüsselung
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename ofb_decipher.eps
	width 45col%

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:ofb"

\end_inset

Betriebsart OFB
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Vorteilhaft ist, daß Bitfehler in einem Cipherblock 
\begin_inset Formula $c_{i}$
\end_inset

 ohne jegliche Streuwirkung transparent auf den Klartext 
\begin_inset Formula $p_{i}$
\end_inset

 abgebildet werden -- die Fehlerfortpflanzung
\begin_inset Index
status collapsed

\begin_layout Plain Layout
Fehlerfortpflanzung
\end_layout

\end_inset

 demzufolge sehr begrenzt ausfällt
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Diese Eigenschaft ist beonders wichtig für Anwendungen und Protokolle, die
 eine bestimmte Quality of Service (QoS) zusichern.
\end_layout

\end_inset

.
 Gehen jedoch ganze Blöcke 
\begin_inset Formula $c_{i}$
\end_inset

 verloren, so ist die Synchronisation bleibend gestört und der gesamte Klartext
 ab diesem Zeitpunkt dauerhaft fehlerhaft
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Die Betriebsart OFB wird aus diesem Grund als nicht-selbstsynchronisierend
 bezeichnet.
\end_layout

\end_inset

.
 Zur Resynchronisation ist es deshalb unbedingt notwendig, daß von Zeit
 zu Zeit (je nach Anforderung) ein neuer Initialisierungsvektor in Richtung
 Empfänger übertragen wird.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sec:ctr_mode"

\end_inset

Counter (CTR)
\end_layout

\begin_layout Standard
\begin_inset Index
status collapsed

\begin_layout Plain Layout
CTR-Modus
\end_layout

\end_inset

Die CTR-Betriebsart
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Eine Weiterentwicklung der Betriebsart CTR stellt der Galois/Counter Mode
 (GCM) nach
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "NIST:800-38D"

\end_inset

 dar.
\end_layout

\end_inset

 arbeitet ähnlich wie der OFB-Modus, nur daß der 
\begin_inset Quotes eld
\end_inset

Pseudozufall
\begin_inset Quotes erd
\end_inset

 aus einer einem Zähler mit sehr großer (praktisch nicht erreichbarer) Periode
 stammt
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Lipmaa:2000"

\end_inset

.
 Das Beispiel in Abbildung
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:ctr_mode"

\end_inset

, welches für ATM gilt (
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
cf
\end_layout

\end_inset

 
\begin_inset CommandInset citation
LatexCommand cite
after "Annex 6.4.4"
key "ATMF:SecuritySpec:1999"

\end_inset

), soll das Prinzip verdeutlichen.
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ctr_mode.eps

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:ctr_mode"

\end_inset

ATM Counter-Modus
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Entscheidend ist, daß der Counter für jeden zu ver- oder entschlüsselnden
 Block einen anderen Wert (Zustandsvektor) liefert.
 Er besteht in diesem Fall aus:
\end_layout

\begin_layout Description
LFSR
\begin_inset Index
status collapsed

\begin_layout Plain Layout
LFSR
\end_layout

\end_inset

 Das Schieberegister (LFSR) hat eine Länge von 21
\begin_inset space ~
\end_inset

Bit und ist durch das irreduzible (und primitive) Generatorpolynom 
\begin_inset Formula $g(x)=x^{21}+x^{2}+1$
\end_inset

 charakterisiert.
\end_layout

\begin_layout Description
I/R
\begin_inset Index
status collapsed

\begin_layout Plain Layout
I/R-Bit
\end_layout

\end_inset

 Das Initiator/Responder-Bit (I/R) identifiziert den Anrufenden (Calling
 Party) bzw.
 Angerufenen (Called Party) und schützt damit vor Angriffen auf schlüsselgleiche
 Texte.
\end_layout

\begin_layout Description
SEQ
\begin_inset Index
status collapsed

\begin_layout Plain Layout
Sequenznummer
\end_layout

\end_inset

 Die Sequenznummer (SEQ) wird von höheren Protokollen übernommen (nur AAL-3/4
 und AAL-1).
\end_layout

\begin_layout Description
SEG
\begin_inset Index
status collapsed

\begin_layout Plain Layout
Segmentnummer
\end_layout

\end_inset

 Die Segmentnummer (SEG) identifiziert das ver- 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
resp
\end_layout

\end_inset

 entschlüsselte Segment einer ATM-Zelle.
\end_layout

\begin_layout Description
JUMP
\begin_inset Index
status collapsed

\begin_layout Plain Layout
Sprungnummer
\end_layout

\end_inset

 Die Jump Number
\begin_inset Index
status collapsed

\begin_layout Plain Layout
Jump Number
\end_layout

\end_inset

 (JUMP) wird bei jeder Session Key Changeover OAM-Zelle und bei einem 
\emph on
End Of Message
\emph default

\begin_inset space ~
\end_inset

(EOM) im AAL-5 erhöht.
\end_layout

\begin_layout Standard
Bezüglich der Synchronisation und Fehlerfortpflanzung
\begin_inset Index
status collapsed

\begin_layout Plain Layout
Fehlerfortpflanzung
\end_layout

\end_inset

 gelten dieselben Aussagen wie für die Betriebsart OFB.
 Vorteilhaft ist der CTR-Modus insbesondere für Hochgeschwindigkeitsanwendungen,
 denn:
\end_layout

\begin_layout Itemize
das Parallelisieren von Kryptooperationen ist möglich, da überhaupt keine
 Rückkopplung vorhanden ist;
\end_layout

\begin_layout Itemize
Ver- und Entschlüsselung verlaufen prinzipiell gleich (solange Synchronisation
 herrscht), was die Realisierung vereinfacht und Ressourcen spart.
 
\end_layout

\begin_layout Subsubsection
Mischarten
\end_layout

\begin_layout Standard
Will man (in Verbindung mit hohen Datenraten) die Eigenschaft der Selbstsynchron
isation mit einer geringen Fehlerfortpflanzung kombinieren, so bietet sich
 eine Mischung von OFB und CFB als Betriebsarten an.
 Dazu muß man nur die Rückkopplungen beider Betriebsarten (umschaltbar)
 miteinander vereinen, was in Abbildung
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:mixed_mode"

\end_inset

 durch einen Multiplexer (MUX) realisiert wird.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Verschlüsselung
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename mixed_encipher.eps
	height 4.3cm

\end_inset


\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Entschlüsselung
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename mixed_decipher.eps
	height 4.37cm

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:mixed_mode"

\end_inset

Kombination von CFB- und OFB-Modus
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Algorithmus
\begin_inset space ~
\end_inset

 beschreibt den Entschlüsselungsvorgang, wobei statistische Selbstsynchronisatio
n (siehe 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
eg
\end_layout

\end_inset

 
\begin_inset CommandInset citation
LatexCommand cite
key "ruland:1997"

\end_inset

 für Details) eine Möglichkeit darstellt um den Zeitpunkt der Umschaltung
 von einer Betriebsart in die andere zu bestimmen.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Synchronisation
\begin_inset CommandInset label
LatexCommand label
name "alg:cfbofb"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{algorithmic}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
IF {synchron}
\end_layout

\begin_layout Plain Layout


\backslash
FOR {ever}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
STATE 
\end_layout

\end_inset


\begin_inset Formula $c_{i}=p_{i}\oplus e_{i}$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
STATE
\end_layout

\end_inset

 
\begin_inset Formula $\mbox{FB}=e_{i}$
\end_inset

 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
COMMENT {OFB-Mode}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
ENDFOR
\end_layout

\begin_layout Plain Layout


\backslash
ELSE
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
STATE 
\end_layout

\end_inset


\begin_inset Formula $c_{i}=p_{i}\oplus e_{i}$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
STATE
\end_layout

\end_inset

 
\begin_inset Formula $\mbox{FB}=c_{i}$
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
COMMENT {CFB-Mode}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
ENDIF
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{algorithmic}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Index
status collapsed

\begin_layout Plain Layout
Blockchiffren|)
\end_layout

\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:crypto_hash"

\end_inset

Hash-Algorithmen
\end_layout

\begin_layout Subsection
Einführung
\end_layout

\begin_layout Standard
\begin_inset Index
status collapsed

\begin_layout Plain Layout
Hash!-Algorithmen
\end_layout

\end_inset


\begin_inset Index
status collapsed

\begin_layout Plain Layout
Hash
\end_layout

\end_inset

Kryptografische Hash-Funktionen bilden das Rückgrat von Kryptoverfahren
 und -algorithmen
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Menezes:1992"

\end_inset

.
 Wie die aus der Informatik bekannten Hash-Funktionen auch, bilden sie eine
 große Eingangsmenge 
\begin_inset Formula $\{x\}$
\end_inset

 eindeutig (deterministisch) auf eine viel kleinere Ausgangsmenge 
\begin_inset Formula $y=\operatorname{H}(x)$
\end_inset

 ab.
 Sie haben jedoch folgende ergänzende Eigenschaften, welche deren algorithmische
 Komplexität mit dem jeweiligen Stand der Technik in Verbindung bringen:
\end_layout

\begin_layout Enumerate
Es ist praktisch unmöglich zwei Eingangswerte 
\begin_inset Formula $x\neq x'$
\end_inset

 zu finden (wahlfrei), die denselben Hashwert 
\begin_inset Formula $y$
\end_inset

 besitzen (Kollisionsfreiheit).
\end_layout

\begin_layout Enumerate
Der Algorithmus ist eine Einweg-Funktion
\begin_inset Index
status collapsed

\begin_layout Plain Layout
Einweg-Funktion
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ie
\end_layout

\end_inset

 für einen gegebenen Hash-Wert 
\begin_inset Formula $y$
\end_inset

 kann man praktisch keinen zugehörigen Wert 
\begin_inset Formula $x=\operatorname{H}^{-1}(y)$
\end_inset

 berechnen (1.
\begin_inset space ~
\end_inset

Urbild-Festigkeit).
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Eigentlich existiert 
\begin_inset Formula $\operatorname{H}^{-1}$
\end_inset

 nicht einmal (oder nur theoretisch).
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Es ist praktisch unmöglich zu einem vorgegebenen Eingangswert 
\begin_inset Formula $x$
\end_inset

 einen weiteren Wert 
\begin_inset Formula $x'\neq x$
\end_inset

 zu finden, der denselben Hash-Wert 
\begin_inset Formula $y$
\end_inset

 erzeugt (2.
\begin_inset space ~
\end_inset

Urbild-Festigkeit).
\end_layout

\begin_layout Standard
Insbesondere ältere Hash-Funktionen, wie 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
eg
\end_layout

\end_inset

 der MD5
\begin_inset Index
status collapsed

\begin_layout Plain Layout
MD5
\end_layout

\end_inset

 können dies heute nicht mehr gewährleisten, aber auch der SHA-1
\begin_inset Index
status collapsed

\begin_layout Plain Layout
SHA-1
\end_layout

\end_inset

 gilt seit 2005 als 
\begin_inset Quotes pld
\end_inset

geknackt
\begin_inset Quotes prd
\end_inset

.
 Alternativen wie SHA-256 oder SHA-512 (auch kurz SHA-2
\begin_inset Index
status collapsed

\begin_layout Plain Layout
SHA-2
\end_layout

\end_inset

 genannt) stehen zwar zur Verfügung, werden aber noch nicht überall konsequent
 genutzt.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Da auch die Lebenserwartung dieser Algorithmen begrenzt sein wird, will
 das NIST bis 2012 den Nachfolger SHA-3 definieren (siehe 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://csrc.nist.gov/groups/ST/hash/timeline.html
\end_layout

\end_inset

).
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Wirkprinzip
\end_layout

\begin_layout Standard
Die Berechnung des Hash-Wertes 
\begin_inset Formula $y$
\end_inset

 erfolgt üblicherweise durch Zerlegung des Eingangs-Vektors 
\begin_inset Formula $x$
\end_inset

 in 
\begin_inset Formula $k$
\end_inset

 Blöcke fester Breite, die dann iterativ mit Hilfe einer nichtlinearen Kompressi
onsfunktion 
\begin_inset Formula $\operatorname{C}$
\end_inset

 verarbeitet werden.
 Abbildung
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:hash_merkle_damgard"

\end_inset

 zeigt die unter dem Namen Merkle/Damg
\begin_inset ERT
status open

\begin_layout Plain Layout

{
\backslash
aa}
\end_layout

\end_inset

rd-Konstruktion bekannte Struktur
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Merkle:1989,Damgard:1989"

\end_inset

.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Eine gewisse Ähnlichkeit mit den verketteten Betriebsarten der Blockchiffren
 (
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cf
\end_layout

\end_inset

 Abschnitt
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:crypto_blockcipher_opmodes"

\end_inset

) ist nicht von der Hand zu weisen.
\end_layout

\end_inset

 Für jeden Zwischenwert gilt ausgehend von 
\begin_inset Formula $y_{0}=\mbox{IV}$
\end_inset

 die Gleichung 
\begin_inset Formula $y_{i}=\operatorname{C}(y_{i-1},x_{i})$
\end_inset

 und so für das Ergebnis: 
\begin_inset Formula $y=\operatorname{H}(x)=y_{k}$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename merkle-damgard.eps

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:hash_merkle_damgard"

\end_inset

Merkle/Damg
\begin_inset ERT
status open

\begin_layout Plain Layout

{
\backslash
aa}
\end_layout

\end_inset

rd-Konstruktion
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Die MD-Familie
\end_layout

\begin_layout Standard
Zu den Mitgliedern dieser Hash-Familie, welche von 
\noun on
R.
\begin_inset space ~
\end_inset

Rivest
\noun default
 entwickelt wurde, gehören unter anderem der MD2\SpecialChar \ldots{}
MD5, SHA-1 und SHA-2
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "RFC1321,FIPS:180-3,ISO:10118-3"

\end_inset

.
 Am Beispiel des SHA-1 soll deren prinzipielle Arbeitsweise verdeutlicht
 werden, wofür in Abbildung
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:sha1"

\end_inset

 die zugehörige Kompressionsfunktion 
\begin_inset Formula $\operatorname{C}$
\end_inset

 dargestellt ist.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename sha1.eps

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:sha1"

\end_inset

Hash-Funktion SHA-1
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Der SHA-1 ist für 32-Bit Architekturen optimiert, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ie
\end_layout

\end_inset

 alle Variablen in Abbildung
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:sha1"

\end_inset

 sind von entsprechender Breite.
 Die (Eingangs-) Blockbreite 
\begin_inset Formula $x_{i}$
\end_inset

 beträgt 64
\begin_inset space ~
\end_inset

Byte, also 16
\begin_inset space ~
\end_inset

Worte zu je 32-Bit.
 Ein Hash-Wert 
\begin_inset Formula $y_{i}$
\end_inset

 besteht aus 160-Bit (20
\begin_inset space ~
\end_inset

Byte, 5
\begin_inset space ~
\end_inset

Worte) und wird iterativ in 80 sogenannten Runden erzeugt.
 Speziell beim SHA-1 (nicht so bei SHA-2) werden jeweils 20
\begin_inset space ~
\end_inset

Runden mit den gleichen Konstanten und Funktionen realisiert, so daß man
 die Darstellung auf 4
\begin_inset space ~
\end_inset

Funktionsblöcke 
\begin_inset Formula $f_{1},\dots,f_{4}$
\end_inset

 reduzieren kann.
 Der Algorithmus kann folgendermaßen beschrieben werden:
\end_layout

\begin_layout Enumerate
Erzeuge im 
\begin_inset Quotes pld
\end_inset

Message Schedule
\begin_inset Quotes prd
\end_inset

 aus den 16
\begin_inset space ~
\end_inset

Eingangsworten, welche 
\begin_inset Formula $W_{0},\dots,W_{15}$
\end_inset

 zugeordnet werden, iterativ weitere 64
\begin_inset space ~
\end_inset

Worte 
\begin_inset Formula $W_{i}$
\end_inset

 nach folgender Vorschrift:
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Die iterative Berechnung der 
\begin_inset Formula $W_{i}$
\end_inset

 eröffnet im Zusammenhang mit deren sequentieller Nutzung die Möglichkeit,
 nur jeweils 16
\begin_inset space ~
\end_inset

Werte vorzuhalten (siehe auch 
\begin_inset CommandInset citation
LatexCommand cite
after "8.~Alternate Method of Computation"
key "FIPS:180-1"

\end_inset

).
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Formula \[
W_{i}=\rol^{1}(W_{i-3}\oplus W_{i-8}\oplus W_{i-14}\oplus W_{i-16}),\qquad16\leq i\leq79\mperiod\]

\end_inset


\end_layout

\begin_layout Standard
Darin steht 
\begin_inset Formula $\rol$
\end_inset


\begin_inset CommandInset nomenclature
LatexCommand nomenclature
prefix "rol"
symbol "$\\rol^i(x)$"
description "Linksrotation von $x$ um $i$ Bit"

\end_inset

 für 
\begin_inset Quotes pld
\end_inset

Rotate Left
\begin_inset Quotes prd
\end_inset

 und der zugehörige Exponent für die Anzahl der Bits, um die es nach links
 zu rotieren gilt.
\end_layout

\end_deeper
\begin_layout Enumerate
Sollte es sich um den ersten Block 
\begin_inset Formula $x_{1}$
\end_inset

 handeln, dann initialisiere 
\begin_inset Formula $H_{0},\dots,H_{5}$
\end_inset

 mit den Konstanten:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Formula \begin{xalignat*}{2}
H_{0} & =\hex{67452301} & H_{1} & =\hex{EFCDAB89}\\
H_{2} & =\hex{98BADCFE} & H_{3} & =\hex{10325476}\\
H_{4} & =\hex{C3D2E1F0}\end{xalignat*}

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Ordne 
\begin_inset Formula $(H_{0},\dots,H_{4})$
\end_inset

 dem Vektor 
\begin_inset Formula $(A,B,C,D,E)$
\end_inset

 zu.
\end_layout

\begin_layout Enumerate
Berechne 80
\begin_inset space ~
\end_inset

Runden (
\begin_inset Formula $0\leq t\leq79$
\end_inset

), im speziellen Fall von SHA-1 genau 
\begin_inset Formula $4\cdot20$
\end_inset

 Runden (
\begin_inset Formula $1\leq n\leq4$
\end_inset

), nach folgender Vorschrift:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Formula \begin{align*}
\mathrm{TEMP} & :=\rol^{5}(A)+f_{n}(B,C,D)+E+W_{t}+K_{t}\\
E & :=D\\
D & :=C\\
C & :=\rol^{30}(B)\\
B & :=A\\
A & :=\mathrm{TEMP},\end{align*}

\end_inset


\end_layout

\begin_layout Standard
wobei Additionen immer modulo 
\begin_inset Formula $2^{32}$
\end_inset

 ausgeführt werden.
 Die Konstanten 
\begin_inset Formula $K_{t}$
\end_inset

 sind definiert als:
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{alignat*}{4}
K_{0} & =K_{1} &  & =\ldots &  & =\, & K_{19} & =\hex{5A827999}\\
K_{20} & =K_{21} &  & =\ldots &  & =\, & K_{39} & =\hex{6ED9EBA1}\\
K_{40} & =K_{41} &  & =\ldots &  & =\, & K_{59} & =\hex{8F1BBCDC}\\
K_{60} & =K_{61} &  & =\ldots &  & =\, & K_{79} & =\hex{CA62C1D6}\mperiod\end{alignat*}

\end_inset


\end_layout

\begin_layout Standard
Die Funktionen 
\begin_inset Formula $f_{1},\dots,f_{4}$
\end_inset

, welche für jeweils 20
\begin_inset space ~
\end_inset

Runden verwendet werden, sind folgendermaßen spezifiziert:
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
prefix "~"
symbol "$\\wedge$"
description "(Bit-für-Bit) UND"

\end_inset


\begin_inset CommandInset nomenclature
LatexCommand nomenclature
prefix "~"
symbol "$\\vee$"
description "(Bit-für-Bit) ODER"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \begin{xalignat*}{2}
f_{1}(B,C,D) & =(B\wedge C)\vee(\overline{B}\wedge D) &  & \qquad\mbox{(Multiplexer)}\\
f_{2}(B,C,D) & =B\oplus C\oplus D &  & \qquad\mbox{(Parity)}\\
f_{3}(B,C,D) & =(B\wedge C)\vee(B\wedge D)\vee(C\wedge D) &  & \qquad\mbox{(Majority)}\\
f_{4}(B,C,D) & =B\oplus C\oplus D &  & \qquad\mbox{(Parity)}\mperiod\end{xalignat*}

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Berechne die Ergebniswerte 
\begin_inset Formula $(H_{0},\dots,H_{4})$
\end_inset

, welche letztlich den Hash-Wert 
\begin_inset Formula $y_{i}$
\end_inset

 dieses Blocks ausmachen, wiefolgt:
\begin_inset Foot
status open

\begin_layout Plain Layout
Beachte, daß dieser letzte Schritt in Abbildung
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:sha1"

\end_inset

 nicht dargestellt ist.
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Formula \begin{xalignat*}{2}
H_{0} & :=H_{0}+A & H_{1} & :=H_{1}+B\\
H_{2} & :=H_{2}+C & H_{3} & :=H_{3}+D\\
H_{4} & :=H_{4}+E\mperiod\end{xalignat*}

\end_inset


\end_layout

\end_deeper
\begin_layout Paragraph
SHA-2
\end_layout

\begin_layout Standard
Bei den SHA-2
\begin_inset Index
status collapsed

\begin_layout Plain Layout
SHA-2
\end_layout

\end_inset

 Hash-Funktionen ist dieses Prinzip erhalten geblieben, die Änderungen liegen
 im Detail
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "FIPS:180-3"

\end_inset

:
\end_layout

\begin_layout Itemize
Die Anzahl der Bits im Hash-Wert wurde erhöht und entspricht dem jeweiligen
 Namen: SHA-224, SHA-256, SHA-384, SHA-512.
 Dazu gab es zwei wesentliche Modifikationen:
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
SHA-224 und SHA-384 sind im Hash-Wert künstlich verkürzte SHA-256 und SHA-512
 Varianten (die allerdings mit jeweils anderen Initialwerten für 
\begin_inset Formula $(H_{0},\dots,H_{7})$
\end_inset

 starten).
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
Der Hash-Vektor 
\begin_inset Formula $(H_{0},\dots,H_{4})$
\end_inset

 wurde auf 
\begin_inset Formula $(H_{0},\dots,H_{7})$
\end_inset

 erweitert, genau wie auch die Zwischenwerte 
\begin_inset Formula $(A,B,C,D,E)$
\end_inset

 auf 
\begin_inset Formula $(A,B,C,D,E,F,G,H)$
\end_inset

.
\end_layout

\begin_layout Enumerate
SHA-384 und SHA-512 sind optimiert für 64-Bit Architekturen, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ie
\end_layout

\end_inset

 jedes Wort ist 64-Bit breit und so auch die Blockbreite verdoppelt auf
 128
\begin_inset space ~
\end_inset

Byte.
\end_layout

\end_deeper
\begin_layout Itemize
Zur 
\begin_inset Quotes pld
\end_inset

Rotate Left
\begin_inset Quotes prd
\end_inset

 Operation sind weitere hinzugekommen: 
\begin_inset Quotes pld
\end_inset

Rotate Right
\begin_inset Quotes prd
\end_inset

 und 
\begin_inset Quotes pld
\end_inset

Shift Left/Right
\begin_inset Quotes prd
\end_inset

 -- insgesamt wurde die Rundenfunktion verkompliziert.
\end_layout

\begin_layout Itemize
Innerhalb eines Algorithmus' ist die Rundenfunktion invariant -- es wird
 in jeder Runde aber eine andere Konstante 
\begin_inset Formula $K_{t}$
\end_inset

 verwendet.
\end_layout

\begin_layout Itemize
Beim SHA-224/256 werden anstatt der 80
\begin_inset space ~
\end_inset

Runden nur 64
\begin_inset space ~
\end_inset

Runden ausgeführt.
\end_layout

\begin_layout Subsection
Padding
\end_layout

\begin_layout Standard
Da jede Hash-Funktion für eine fixe (Eingangs-) Blockbreite konzipiert ist,
 muß man den letzten Block meist auf diese erweitern.
 Bei den standardisierten Hash-Algorithmen scheint sich folgende Vorgehensweise
 durchgesetzt zu haben:
\end_layout

\begin_layout Enumerate
Füge immer ein einzelnes Bit mit dem Wert 
\begin_inset Formula $1$
\end_inset

 an (typisches ISO-Padding), bei Byte-orientierten Implementierung den Wert
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hex{80}
\end_layout

\end_inset

.
\end_layout

\begin_layout Enumerate
Gewährleiste, daß am Ende des letzten Blocks 64
\begin_inset space ~
\end_inset

Bit Platz sind für die Aufnahme eines Zählers.
 Ist dies nicht gegeben, schließe den aktuellen Block durch Auffüllen mit
 Nullen ab und verarbeite ihn mit der Kompressionsfunktion.
\end_layout

\begin_layout Enumerate
Fülle den aktuellen Block, ausgenommen die letzten 64
\begin_inset space ~
\end_inset

Bit, mit Nullen auf.
\end_layout

\begin_layout Enumerate
Füge einen Blockzähler (
\family typewriter
CNT
\family default
 in Abbildung
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:sha1"

\end_inset

) in die letzten 64
\begin_inset space ~
\end_inset

Bit ein und verarbeite diesen Block mit der Kompressionsfunktion.
\end_layout

\begin_layout Enumerate
Nehme das Ergebnis 
\begin_inset Formula $y_{k}$
\end_inset

 dieses letzten Blocks als Hash-Wert 
\begin_inset Formula $\operatorname{H}(x)$
\end_inset

.
\end_layout

\begin_layout Section
Asymmetrische Algorithmen
\begin_inset Index
status collapsed

\begin_layout Plain Layout
Public-Key Verfahren
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sec_rsa"

\end_inset

RSA
\end_layout

\begin_layout Standard
\begin_inset Index
status open

\begin_layout Plain Layout
RSA|(
\end_layout

\end_inset

Beim RSA-Algorithmus handelt es sich um das bekannteste asymmetrische Kryptoverf
ahren, benannt nach seinen Erfindern 
\noun on
Rivest
\noun default
-
\noun on
Shamir
\noun default
-
\noun on
Adleman
\noun default

\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "RSA:1978,Rivest:1978"

\end_inset

.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Der Algorithmus wurde in
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "PKCS1:1993"

\end_inset

 zu einem 
\begin_inset Quotes pld
\end_inset

Quasi
\begin_inset Quotes prd
\end_inset

-Standard erhoben und ist heute fester Bestandteil vieler internationaler
 Normen und Standards
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "ISO:18033-2,ISO:9796-2,IEEE:STD1363,RFC3447,ATMF:SecuritySpec:1999"

\end_inset

.
\end_layout

\end_inset

 Die mathematische Grundlage bilden Restklassenkörper, verbunden mit der
 Schwierigkeit große Zahlen zu faktorisieren.
\end_layout

\begin_layout Subsubsection
Schlüsselgenerierung
\end_layout

\begin_layout Standard
Betrachten wir in der Voraussetzung zuerst die Schlüsselerzeugung, welche
 im Wesen folgendermaßen abläuft:
\begin_inset Foot
status open

\begin_layout Plain Layout
Das Schlüsselmaterial bietet im allgemeinen das größte Angriffspotential.
 Deshalb sollte man Anforderungen an RSA-Schlüssel, wie sie 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
eg
\end_layout

\end_inset

 in
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "NIST:800-56B,FIPS:186-3,IEEE:STD1363"

\end_inset

, 
\begin_inset CommandInset citation
LatexCommand cite
after "8.2.2"
key "Menezes:1992"

\end_inset

 und 
\begin_inset CommandInset citation
LatexCommand cite
after "16.2"
key "Welschenbach:2001"

\end_inset

 formuliert sind, unbedingt berücksichtigen.
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Wähle zwei große Primzahlen 
\begin_inset Formula $p,q>2$
\end_inset

, mit 
\begin_inset Formula $p\neq q$
\end_inset

, welche das öffentliche Modul
\begin_inset space ~
\end_inset


\begin_inset Formula $n=pq$
\end_inset

 bestimmen.
\end_layout

\begin_deeper
\begin_layout Standard
Zahlentheoretische Erläuterungen:
\end_layout

\begin_layout Itemize
Bei der Restklasse 
\begin_inset Formula $\mathbb{Z}_{n}:=\{0,1,\dots,n-1\}$
\end_inset

 handelt es sich um einen Ring, nicht um einen Körper.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Das Modul 
\begin_inset Formula $n$
\end_inset

 kann als Produkt zweier ungerader Zahlen allenfalls als ungerade vorausgesetzt
 werden, jedoch nicht als Primzahl.
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Im Gegensatz dazu bilden 
\begin_inset Formula $\mathbb{Z}_{p}$
\end_inset

 und 
\begin_inset Formula $\mathbb{Z}_{q}$
\end_inset

 jeweils einen Primzahlenkörper.
\end_layout

\begin_layout Itemize
Läßt man aus 
\begin_inset Formula $\mathbb{Z}_{n}$
\end_inset

 nur solche Elemente zu, die keinen gemeinsamen Teiler mit dem Modul 
\begin_inset Formula $n$
\end_inset

 haben, wird ein Körper konstruierbar.
 Die Anzahl der Elemente 
\begin_inset Formula $r$
\end_inset

 in dessen multiplikativer Gruppe 
\begin_inset Formula $\mathbb{Z}_{n}^{*}:=\{r\in\mathbb{Z}\,|\,0<r<n,\gcd(r,n)=1\}$
\end_inset

 ergibt sich mit Hilfe von 
\noun on
Euler
\noun default
's Totient-Funktion zu 
\begin_inset Formula $\varphi=\totient(n)=(p-1)(q-1)$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Enumerate
Nun wird eine Zufallszahl 
\begin_inset Formula $1<e<\varphi$
\end_inset

 erzeugt, die keinen gemeinsamen Faktor mit 
\begin_inset Formula $\varphi$
\end_inset

 hat.
 Diese (auch als öffentlicher Exponent bezeichnete) Zahl bildet die Basis
 des öffentlichen Schlüssels 
\begin_inset Formula $(n,e)$
\end_inset

.
\end_layout

\begin_deeper
\begin_layout Standard
Zahlentheoretische Erläuterungen:
\end_layout

\begin_layout Itemize
Wegen 
\begin_inset Formula $\gcd(e,\varphi)=1$
\end_inset

 gehört 
\begin_inset Formula $e$
\end_inset

 zum endlichen Körper 
\begin_inset Formula $\mathbb{Z}_{\varphi}$
\end_inset

.
\end_layout

\begin_layout Itemize
Aus 
\begin_inset Formula $\gcd[e,(p-1)(q-1)]=1$
\end_inset

 läßt sich als notwendige Voraussetzungen 
\begin_inset Formula $\gcd(e,p-1)=1$
\end_inset

 und 
\begin_inset Formula $\gcd(e,q-1)=1$
\end_inset

 ableiten.
\end_layout

\begin_layout Itemize
Da 
\begin_inset Formula $p-1$
\end_inset

 und 
\begin_inset Formula $q-1$
\end_inset

 gerade Zahlen sind, muß 
\begin_inset Formula $e$
\end_inset

 wegen des vorangegangenen Punktes auf jeden Fall ungerade sein.
\end_layout

\end_deeper
\begin_layout Enumerate
Für den privaten Schlüssel 
\begin_inset Formula $(n,d)$
\end_inset

 wird jetzt eine weitere Zahl 
\begin_inset Formula $d$
\end_inset

 so berechnet,
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Zum Beispiel mit Hilfe des erweiterten euklidischen Algorithmus.
\end_layout

\end_inset

 daß 
\begin_inset Formula $de-1$
\end_inset

 ohne Rest durch 
\begin_inset Formula $\varphi$
\end_inset

 teilbar ist.
\end_layout

\begin_deeper
\begin_layout Standard
Zahlentheoretische Erläuterungen:
\end_layout

\begin_layout Itemize
Ausgehend von
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Formula \begin{align}
de & \equiv1\pmod{\varphi}\label{eqn_rsa_de}\end{align}

\end_inset


\end_layout

\begin_layout Standard
kann man 
\begin_inset Formula $d$
\end_inset

 auch als Inverse des öffentlichen Exponents 
\begin_inset Formula $e$
\end_inset

 im Körper 
\begin_inset Formula $\mathbb{Z}_{\varphi}$
\end_inset

 ansehen.
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{align*}
d & \equiv e^{-1}\pmod{\varphi}\end{align*}

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Subsubsection
Algorithmus
\end_layout

\begin_layout Standard
Für die Verschlüsselung wird folgende Operation auf dem Plaintext-Block
 
\begin_inset Formula $m$
\end_inset

 ausgeführt, wobei dieser als Zahl 
\begin_inset Formula $m\in\mathbb{Z}_{n}$
\end_inset

 interpretiert wird:
\end_layout

\begin_layout Emph(asized)
\begin_inset Formula \begin{align}
c & =m^{e}\bmod n\label{eq:crypto_rsa_encipher}\end{align}

\end_inset


\end_layout

\begin_layout Standard
Die inverse Operation der Entschlüsselung wird in gleicher Art und Weise
 vorgenommen:
\end_layout

\begin_layout Emph(asized)
\begin_inset Formula \begin{align}
m' & =c^{d}\bmod n\mperiod\label{eq:crypto_rsa_decipher}\end{align}

\end_inset


\end_layout

\begin_layout Standard
Für den Beweis 
\begin_inset Formula $m'=m$
\end_inset

 wendet man zuerst Gleichung
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "eq:crypto_rsa_encipher"

\end_inset

 an und bezieht dann die Restklassendarstellung 
\begin_inset Formula $de=1+k\varphi$
\end_inset

 (
\begin_inset Formula $k\in\mathbb{N}$
\end_inset

) ein.
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{align*}
m' & =(m^{e}\bmod n)^{d}\bmod n\\
 & =m^{de}\bmod n\\
 & =m\cdot m^{\varphi k}\bmod n\\
 & =m(m^{\varphi})^{k}\bmod n\\
 & =m(m^{\varphi}\bmod n)^{k}\bmod n\end{align*}

\end_inset


\end_layout

\begin_layout Standard
Die weitere Argumentation beruht darauf, daß 
\begin_inset space \thinspace{}
\end_inset


\begin_inset Formula $m^{\varphi}\bmod n=1$
\end_inset


\begin_inset space \thinspace{}
\end_inset

 gilt und so:
\end_layout

\begin_layout Standard

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
\begin_inset Formula \begin{align*}
m' & =m(\,\underbrace{m^{\varphi}\bmod n}_{1}\,)^{k}\bmod n=m\bmod n=m\mperiod\end{align*}

\end_inset


\end_layout

\begin_layout Standard
Besitzen 
\begin_inset Formula $m$
\end_inset

 und 
\begin_inset Formula $n$
\end_inset

 keinen gemeinsamen Teiler (
\begin_inset Formula $\gcd(m,n)=1$
\end_inset

, 
\begin_inset Formula $m\in\mathbb{Z}_{n}^{*}$
\end_inset

), dann kann man auf 
\begin_inset space \thinspace{}
\end_inset


\begin_inset Formula $m^{\varphi}\bmod n$
\end_inset


\begin_inset space \thinspace{}
\end_inset

 einfach 
\noun on
Euler
\noun default
's Satz (nach Formel
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "eq:algebra_euler_totient"

\end_inset

) anwenden und ist fertig.
\end_layout

\begin_layout Standard
Hat 
\begin_inset Formula $m$
\end_inset

 allerdings gemeinsame Teiler mit 
\begin_inset Formula $n$
\end_inset

, dann gilt 
\begin_inset Formula $\gcd(m,n)\neq1$
\end_inset

 und deshalb 
\begin_inset Formula $m\notin\mathbb{Z}_{n}^{*}$
\end_inset

.
 Betrachtet man aber die Faktorisierung von 
\begin_inset Formula $n$
\end_inset

, dann muß 
\begin_inset Formula $m$
\end_inset

 ein Vielfaches von 
\begin_inset Formula $p$
\end_inset

 oder 
\begin_inset Formula $q$
\end_inset

 sein (wegen 
\begin_inset Formula $m<n$
\end_inset

 jedoch nicht von 
\begin_inset Formula $pq$
\end_inset

).
 Unter dieser Voraussetzung wäre die Zerlegung 
\begin_inset Formula $m=\overline{m}p$
\end_inset

 oder 
\begin_inset Formula $m=\overline{m}q$
\end_inset

 möglich, wobei jeweils 
\begin_inset Formula $\gcd(\overline{m},n)=1$
\end_inset

 gilt.
 Im Fall 
\begin_inset Formula $m=\overline{m}p$
\end_inset

 (für 
\begin_inset Formula $m=\overline{m}q$
\end_inset

 ganz genauso) läßt sich die Modulo-Division 
\begin_inset space \thinspace{}
\end_inset


\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none

\begin_inset Formula $m^{\varphi}\bmod n$
\end_inset


\family default
\series default
\shape default
\size default
\emph default
\bar default
\noun default
\color inherit

\begin_inset space \thinspace{}
\end_inset


\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
 durch Kürzen von 
\begin_inset Formula $p$
\end_inset

 
\family default
\series default
\shape default
\size default
\emph default
\bar default
\noun default
\color inherit
und unter Berücksichtigung von 
\begin_inset Formula $\overline{m}<q$
\end_inset

 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
folgendermaßen vereinfachen:
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{align*}
m^{\varphi}\bmod n & =(\overline{m}p\bmod pq)^{\varphi}\bmod n=(\overline{m}\bmod q)^{\varphi}\bmod n=\overline{m}^{\varphi}\bmod q\bmod n=\overline{m}^{\varphi}\bmod q\mperiod\end{align*}

\end_inset


\end_layout

\begin_layout Standard
Wegen 
\begin_inset Formula $\overline{m}\in\mathbb{Z}_{q}^{*}$
\end_inset

 kann nun wieder der Satz von 
\noun on
Euler
\noun default
 zur Anwendung kommen, was den Beweis vervollständigt.
\end_layout

\begin_layout Subsubsection
Optimierung
\end_layout

\begin_layout Standard
Eine Beschleunigung des Verfahrens läßt sich (algorithmisch) vor allem beim
 Entschlüsseln erzielen.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Eine simple Methode den Rechenaufwand beim Verschlüsseln zu reduzieren ist,
 den öffentlichen Exponent 
\begin_inset Formula $e$
\end_inset

 als verhältnismäßig kleine Zahl zu wählen (im einfachsten Fall zu 
\begin_inset Formula $3$
\end_inset

 oder 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
eg
\end_layout

\end_inset

 nach
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
after "Annex~D.6"
key "ITU:X509"

\end_inset

 als 
\noun on
Fermat
\noun default
-Zahl 
\begin_inset Formula $F_{4}=65537$
\end_inset

).
\end_layout

\end_inset

 Geht man dazu von
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{align*}
m' & =c^{d}\bmod n=c^{d}-lpq,\qquad l\in\mathbb{N}\end{align*}

\end_inset


\end_layout

\begin_layout Standard
aus, dann lassen sich (durch Modulo-Division nach 
\begin_inset Formula $p$
\end_inset

 und 
\begin_inset Formula $q$
\end_inset

) die folgenden zwei Kongruenzen formulieren:
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{xalignat*}{2}
m' & \equiv c^{d}\pmod{p} & m' & \equiv c^{d}\pmod{q}\mperiod\end{xalignat*}

\end_inset


\end_layout

\begin_layout Standard
Diese legen eine Anwendung des Chinesischen Restsatzes
\begin_inset Index
status collapsed

\begin_layout Plain Layout
Chinesischer Restsatz
\end_layout

\end_inset

 entsprechend Anhang
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:algebra_crt_lemma"

\end_inset

 nahe
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Grossschadl:2000,Welschenbach:2001"

\end_inset

.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Eine Voraussetzung für dessen Anwendung ist: 
\begin_inset Formula $\gcd(p,q)=1$
\end_inset

, was bei der Wahl von 
\begin_inset Formula $n$
\end_inset

 als Produkt zweier Primzahlen gegeben ist.
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{xalignat*}{2}
m_{p} & =c^{d}\bmod p & m_{q} & =c^{d}\bmod q\\
m' & \equiv m_{p}\pmod{p} & m' & \equiv m_{q}\pmod{q}\end{xalignat*}

\end_inset


\end_layout

\begin_layout Standard
Als Voraussetzung benötigt man die Koeffizienten 
\begin_inset Formula $\alpha$
\end_inset

 und 
\begin_inset Formula $\beta$
\end_inset

 in der 
\noun on
B
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
'{e}
\end_layout

\end_inset

zout
\noun default
-Darstellung des größten gemeinsamen Teilers (
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cf
\end_layout

\end_inset

 Formel
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "eq:algebra_euclid_bezout"

\end_inset

 in Anhang
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:algebra_euclid_generic"

\end_inset

)
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\gcd(p,q)=\alpha p+\beta q=1,\]

\end_inset


\end_layout

\begin_layout Standard
welche 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
eg
\end_layout

\end_inset

 mit Hilfe des erweiterten euklidischen Algorithmus berechnet werden können.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Die Anwendung des euklidischen Algorithmus' stellt im allgemeinen eine rechenint
ensive Operation dar (siehe dazu auch Anhang
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:algebra_gcd"

\end_inset

) .
 Glücklicherweise können 
\begin_inset Formula $\alpha$
\end_inset

 und 
\begin_inset Formula $\beta$
\end_inset

 aber im voraus berechnet werden.
\end_layout

\end_inset

 Sie stellen, wenn man vorangegangene Gleichung nach 
\begin_inset Formula $p$
\end_inset

 und 
\begin_inset Formula $q$
\end_inset

 modulo-dividiert, gleichzeitig die Inversen
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{xalignat*}{2}
\alpha & \equiv p^{-1}\pmod{q} & \beta & \equiv q^{-1}\pmod{p}\end{xalignat*}

\end_inset


\end_layout

\begin_layout Standard
im Körper 
\begin_inset Formula $\mathbb{Z}_{q}$
\end_inset

 und 
\begin_inset Formula $\mathbb{Z}_{p}$
\end_inset

 dar.
 Durch Anwendung des Chinesischen Restsatzes für zwei Kongruenzen kann man
 nun 
\begin_inset Formula $m'$
\end_inset

 berechnen:
\end_layout

\begin_layout Emph(asized)
\begin_inset Formula \begin{equation}
m'=(\alpha m_{q}p+\beta m_{p}q)\bmod n\mperiod\end{equation}

\end_inset


\end_layout

\begin_layout Standard
Der Vorteil liegt darin, daß die modulare Exponentiation modulo 
\begin_inset Formula $n$
\end_inset

, welche die Komplexität 
\begin_inset Formula $\mathcal{O}(\log^{3}n)$
\end_inset

 hat,
\begin_inset Foot
status open

\begin_layout Plain Layout
Der Ausdruck 
\begin_inset Formula $\log n$
\end_inset

 stellt ein Maß für die Anzahl der notwendigen Bits zur Repräsentation von
 
\begin_inset Formula $n$
\end_inset

 dar.
\end_layout

\end_inset

 auf zwei Operationen gleicher Art, aber mit verringerter Anzahl von Stellen
 verteilt.
\end_layout

\begin_layout Standard
Die weitere Optimierung kann in drei Schritten erfolgen:
\end_layout

\begin_layout Enumerate
Wendet man den Chinesischen Restsatz in der Variante nach 
\noun on
H.
\begin_inset space ~
\end_inset

L.
\begin_inset space ~
\end_inset

Garner
\noun default
 an, so werden weitere Vereinfachungen möglich
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Garner:1959"

\end_inset

.
 Denn aus der Restklassendarstellung
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Formula \begin{xalignat*}{2}
m' & =m_{q}+xq & m' & =m_{p}+yp,\qquad x,y\in\mathbb{Z}\end{xalignat*}

\end_inset


\end_layout

\begin_layout Standard
läßt sich eine lineare diophantische Gleichung ableiten (siehe auch Anhang
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:algebra_diophantine_eqn"

\end_inset

):
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{align*}
m_{p}-m_{q} & =xq-yp,\end{align*}

\end_inset


\end_layout

\begin_layout Standard
welche die Lösungsmenge
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{xalignat*}{2}
x_{k} & =\beta(m_{p}-m_{q})+kp & y_{k} & =-\alpha(m_{p}-m_{q})-kq,\qquad k\in\mathbb{Z}\end{xalignat*}

\end_inset


\end_layout

\begin_layout Standard
besitzt.
 Üblicherweise benutzt man zur Berechnung von 
\begin_inset Formula $m'$
\end_inset

 die Lösungen für 
\begin_inset Formula $x_{k}$
\end_inset

 und erhält in geschlossener Darstellung:
\begin_inset Foot
status open

\begin_layout Plain Layout
An dieser Stelle muß man darauf hinweisen, daß für den Ausdruck 
\begin_inset Formula $q\beta\neq1$
\end_inset

 gilt (denn 
\begin_inset Formula $q\beta\equiv1$
\end_inset

 bezieht sich ausschließlich auf den Körper 
\begin_inset Formula $\mathbb{Z}_{p}$
\end_inset

).
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \begin{align*}
m' & =m_{q}+q\beta(m_{p}-m_{q})+kn\mperiod\end{align*}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Comment
status open

\begin_layout Plain Layout
\SpecialChar \ldots{}
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
resp
\end_layout

\end_inset

 in der Variante des Chinesischen Restsatzes:
\end_layout

\begin_layout Plain Layout
\begin_inset Formula \begin{xalignat*}{2}
m' & =m_{q}+\beta q(m_{p}-m_{q})+kpq & m' & =m_{p}-\alpha p(m_{p}-m_{q})-kpq,\qquad k\in\mathbb{Z}\\
 & =m_{q}+\beta qm_{p}-\beta qm_{q}+kpq &  & =m_{p}-\alpha pm_{p}+\alpha pm_{q}-kpq\\
 & =m_{q}(1-\beta q)+\beta qm_{p}+kpq &  & =m_{p}(1-\alpha p)+\alpha pm_{q}-kpq\\
 & =\alpha pm_{q}+\beta qm_{p}+kpq &  & =\beta qm_{p}+\alpha pm_{q}-kpq\end{xalignat*}

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Unter der Voraussetzung 
\begin_inset Formula $m'=m'\bmod n$
\end_inset

 kann man vorangegangene Gleichung noch weiter reduzieren, wenn die allgemeingül
tige Beziehung 
\begin_inset Formula $(rq)\bmod(pq)=q(r\bmod p)$
\end_inset

 berücksichtigt wird.
\begin_inset Note Comment
status collapsed

\begin_layout Plain Layout
\begin_inset Formula \begin{align*}
(ac)\bmod(bc) & =ac-kbc\\
 & =ac-\left\lfloor \frac{ac}{bc}\right\rfloor bc\\
 & =c(a-\left\lfloor \frac{a}{b}\right\rfloor b)\\
 & =c(a\bmod b)\end{align*}

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Emph(asized)
\begin_inset Formula \begin{align}
m' & =m_{q}+q[\beta(m_{p}-m_{q})\bmod p]\end{align}

\end_inset


\end_layout

\begin_layout Standard
Die Vorteile dieser Darstellung liegen vor allem darin, daß
\end_layout

\begin_layout Itemize
eine finale Modulo-Division durch 
\begin_inset Formula $n$
\end_inset

 nicht mehr nötig ist;
\end_layout

\begin_layout Itemize
nur ein 
\noun on
B
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
'{e}
\end_layout

\end_inset

zout
\noun default
-Kofaktor überhaupt benötigt wird;
\end_layout

\begin_layout Itemize
wegen der Zwischenreduktion modulo 
\begin_inset Formula $p$
\end_inset

 die Speicherplatzanforderungen reduziert sind.
\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset CommandInset label
LatexCommand label
name "enu:crypto_rsa_opt_m"

\end_inset

Man kann aber noch weitergehen, indem die Berechnung von 
\begin_inset Formula $m_{p}$
\end_inset

 und 
\begin_inset Formula $m_{q}$
\end_inset

 vereinfacht wird.
 Eine wesentliche Zeitersparnis kommt zustande, wenn man 
\begin_inset Formula $c$
\end_inset

 vor dessen Potenzierung in der Länge reduziert.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Formula \begin{xalignat*}{2}
m_{p} & =c^{d}\bmod p & m_{q} & =c^{d}\bmod q\\
 & =(c\bmod p)^{d}\bmod p &  & =(c\bmod q)^{d}\bmod q\end{xalignat*}

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Eine letzte Optimierung bezieht sich auf den Exponenten 
\begin_inset Formula $d$
\end_inset

, welcher ebenfalls reduziert werden kann.
 Dazu muß man sich nur klarmachen, daß durch die Reduktion von 
\begin_inset Formula $c$
\end_inset

 in Punkt
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "enu:crypto_rsa_opt_m"

\end_inset

 das Ergebnis der Potenzierung jeweils in 
\begin_inset Formula $\mathbb{Z}_{p}$
\end_inset

 oder 
\begin_inset Formula $\mathbb{Z}_{q}$
\end_inset

 und insbesondere in der zugehörigen multiplikativen Gruppe liegt.
 Da diese zyklisch ist, wiederholen sich beim Potenzieren die Werte mit
 der Gruppenordnung 
\begin_inset Formula $|\mathbb{Z}_{p}^{*}|=p-1$
\end_inset

 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
resp
\end_layout

\end_inset

 
\begin_inset Formula $|\mathbb{Z}_{q}^{*}|=q-1$
\end_inset

.
 Aus diesem Grund kann man 
\begin_inset Formula $d$
\end_inset

 auf die Gruppenordnung reduzieren (
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cf
\end_layout

\end_inset

 auch Anhang
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:algebra_galois_multgrp"

\end_inset

).
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Formula \begin{xalignat*}{2}
m_{p} & =(c\bmod p)^{d}\bmod p & m_{q} & =(c\bmod q)^{d}\bmod q\\
 & =c^{d\bmod(p-1)}\bmod p &  & =c^{d\bmod(q-1)}\bmod q\end{xalignat*}

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
Zu der privaten Schlüsseldarstellung 
\begin_inset Formula $(n,d)$
\end_inset

 gibt es deshalb zwei Optionen:
\end_layout

\begin_layout Itemize
ein Tripel 
\begin_inset Formula $(p,q,d)$
\end_inset

, was wegen 
\begin_inset Formula $n=pq$
\end_inset

 trivial erscheint;
\end_layout

\begin_layout Itemize
oder die Darstellung als Quintupel 
\begin_inset Formula $(p,q,d_{p},d_{q},q_{\textup{inv}})$
\end_inset

, mit 
\begin_inset Formula $d_{p}=d\bmod(p-1)$
\end_inset

, 
\begin_inset Formula $d_{q}=d\bmod(q-1)$
\end_inset

 und 
\begin_inset Formula $q_{\textup{inv}}=q^{-1}\pmod{p}$
\end_inset

.
\end_layout

\begin_layout Standard
Wegen der signifikanten Geschwindigkeitsvorteile wird fast immer die Quintupel-V
ariante verwendet
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "IEEE:STD1363,ISO:18033-2,PKCS1:2002"

\end_inset

.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
In
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
after "14.5.2"
key "Menezes:1992"

\end_inset

 wird auf der Grundlage einer kurzen Komplexitätsbetrachtung die Beschleunigung
 mit dem Faktor 
\begin_inset Formula $4$
\end_inset

 ausgewiesen.
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Verschlüsselung nach PKCS
\begin_inset space \thinspace{}
\end_inset

#1
\end_layout

\begin_layout Standard
\begin_inset Index
status collapsed

\begin_layout Plain Layout
PKCS
\begin_inset space ~
\end_inset

#1
\end_layout

\end_inset

Um den RSA-Algorithmus praktisch auf die Verschlüsselung von Daten anzuwenden,
 müssen diese zuerst geeignet aufbereitet werden.
 Der Prozeß dieser Formatierung wird in
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "IEEE:STD1363,PKCS1:2002"

\end_inset

 als 
\emph on
Message Encoding Operation
\emph default
 bezeichnet, in
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "PKCS1:1993"

\end_inset

 hingegen als 
\emph on
Encryption Block Formatting
\emph default
.
\end_layout

\begin_layout Paragraph
PKCS
\begin_inset space \thinspace{}
\end_inset

#1
\begin_inset space ~
\end_inset

v1.5
\end_layout

\begin_layout Standard
Mit der Methode nach
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "PKCS1:1993"

\end_inset

 gestaltet sich die Formatierung noch relativ einfach.
\begin_inset Foot
status open

\begin_layout Plain Layout
Die Formatierung nach 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
mbox{PKCS
\backslash
,
\backslash
#1~v1.5}
\end_layout

\end_inset

 wurde in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
mbox{PKCS
\backslash
,
\backslash
#1~v2.1}
\end_layout

\end_inset

 als Verfahren 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
mbox{RSAES-PKCS1-v1
\backslash
_5}
\end_layout

\end_inset

 übernommen
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "PKCS1:2002"

\end_inset

.
\end_layout

\end_inset

 Der Datenblock 
\family typewriter
D
\family default
 wird entsprechend Abbildung
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:crypto_rsa_pkcs1v15"

\end_inset

 in die Struktur des sogenannten 
\emph on
Encryption Block
\emph default
 
\family typewriter
EB
\family default
 eingebunden.
 Auf den 
\emph on
Encryption Block
\emph default
 
\family typewriter
EB
\family default
 wird letztlich der RSA-Algorithmus nach Formel
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "eq:crypto_rsa_encipher"

\end_inset

 angewendet.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Das führende 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hex{00}
\end_layout

\end_inset

-Byte's in 
\family typewriter
EB
\family default
 gewährleistet für den (als Zahl interpretierten) 
\emph on
Encryption Block
\emph default
 
\begin_inset Formula $\mathrm{EB}<n$
\end_inset

 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
resp
\end_layout

\end_inset

 
\begin_inset Formula $\mathrm{EB}\in\mathbb{Z}_{n}$
\end_inset

.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename pkcs1_v15_eb.eps

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:crypto_rsa_pkcs1v15"

\end_inset

Blockformatierung nach PKCS
\begin_inset space \thinspace{}
\end_inset

#1
\begin_inset space ~
\end_inset

v1.5
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Die weiteren Elemente im 
\emph on
Encryption Block
\emph default
 haben folgende Bedeutung:
\end_layout

\begin_layout Synopsis
\labelwidthstring 4em
\noindent
BT Der 
\emph on
Block Type
\emph default
 zeigt die Verwendung des privaten oder öffentlichen Schlüssels (im anschließend
en RSA-Algorithmus) an.
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hex{00}
\end_layout

\end_inset

 Signieren (Verwendung des privaten Schlüssels);
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hex{01}
\end_layout

\end_inset

 genauso wie 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hex{00}
\end_layout

\end_inset

 (der Unterschied liegt im Element 
\family typewriter
PS
\family default
);
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hex{02}
\end_layout

\end_inset

 Verschlüsseln (Verwendung des öffentlichen Schlüssels).
\end_layout

\end_deeper
\begin_layout Synopsis
\labelwidthstring 4em
\noindent
PS Ein 
\emph on
Padding String
\emph default
 dient der Anpassung an die Länge des Moduls
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "$\\Vert x \\Vert$"
description "Länge von $x$ in Byte"

\end_inset

 
\begin_inset Formula $k=\left\Vert n\right\Vert $
\end_inset

 so, daß 
\begin_inset Formula $\left\Vert \mathrm{PS}\right\Vert +\left\Vert D\right\Vert +3=k$
\end_inset

 gewährleistet ist.
 Die Länge von 
\family typewriter
PS
\family default
 soll mindestens 8
\begin_inset space ~
\end_inset

Byte sein, was im Umkehrschluß die von 
\family typewriter
D
\family default
 auf 
\begin_inset Formula $k-11$
\end_inset

 Bytes beschränkt.
 Das Padding selbst hängt vom Typ des Blocks (
\family typewriter
BT
\family default
) ab:
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hex{00}
\end_layout

\end_inset

 alle Bytes sind 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hex{00}
\end_layout

\end_inset

;
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hex{01}
\end_layout

\end_inset

 alle Bytes sind 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hex{FF}
\end_layout

\end_inset

;
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hex{02}
\end_layout

\end_inset

 alle Bytes sind zufällig, aber ungleich 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hex{00}
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Der Inhalt von 
\family typewriter
PS
\family default
 ist beim Entschlüsseln (Byte für Byte) auf konforme Kodierung zu prüfen
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
after "9.4"
key "PKCS1:1993"

\end_inset

.
 Für die Blocktypen 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hex{01}
\end_layout

\end_inset

 und 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hex{02}
\end_layout

\end_inset

 kann der Anfang (und damit auch die Länge) des Datenblocks 
\family typewriter
D
\family default
 ermittelt werden, indem das 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hex{00}
\end_layout

\end_inset

-Byte zwischen 
\family typewriter
PS
\family default
 und 
\family typewriter
D
\family default
 gesucht wird.
 Für den Blocktyp 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hex{00}
\end_layout

\end_inset

 ist dieses Verfahren nur geeignet, wenn das erste Byte in 
\family typewriter
D
\family default
 immer ungleich 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hex{00}
\end_layout

\end_inset

 ist.
 Kann dies nicht vorausgesetzt werden, dann muß die Länge 
\begin_inset Formula $\left\Vert \mathtt{D}\right\Vert $
\end_inset

 a priori bekannt sein.
\begin_inset Foot
status open

\begin_layout Plain Layout
Der Blocktyp 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hex{00}
\end_layout

\end_inset

 wird im 
\emph on
Privacy Enhanced Mail
\emph default
 (PEM) RFC nach
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "IETF:RFC1423"

\end_inset

 nicht verwendet.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Paragraph
PKCS
\begin_inset space \thinspace{}
\end_inset

#1
\begin_inset space ~
\end_inset

v2.1
\end_layout

\begin_layout Standard
Nicht zuletzt wegen des sehr erfolgreiche Angriffs nach
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Bleichenbacher:1998"

\end_inset

 wird die 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
mbox{PKCS
\backslash
,
\backslash
#1~v1.5}
\end_layout

\end_inset

 Formatierung heute nicht mehr empfohlen.
 Statt dessen sollte grundsätzlich Version
\begin_inset space ~
\end_inset

2.1 nach
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "PKCS1:2002,IEEE:STD1363,ISO:18033-2"

\end_inset

 zum Einsatz kommen, welche 
\emph on
Optimal Asymmetric Encryption Padding
\emph default
 (OAEP) verwendet
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Bellare:1995"

\end_inset

.
\begin_inset Foot
status open

\begin_layout Plain Layout
Ursprünglich galt das von 
\noun on
M.
\begin_inset space ~
\end_inset

Bellare
\noun default
 und 
\noun on
P.
\begin_inset space ~
\end_inset

Rogaway
\noun default
 entwickelte OAEP (gegen 
\emph on
Chosen Ciphertext
\emph default
 
\emph on
Attacks
\emph default
, im Rahmen des 
\emph on
Random Oracle Models
\emph default
) als beweisbar sicher.
 Im Jahre
\begin_inset space ~
\end_inset

2001 konnte jedoch 
\noun on
V.
\begin_inset space ~
\end_inset

Shoup
\noun default
 einen Fehler in den Ausführungen von
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Bellare:1995"

\end_inset

 nachweisen, weshalb OAEP heute 
\begin_inset Quotes pld
\end_inset

nur
\begin_inset Quotes prd
\end_inset

 noch als sehr sicher angesehen wird.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Den Kern der Blockformatierung nach Abbildung
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:crypto_rsa_pkcs1v21"

\end_inset

 macht eine sogenannte 
\emph on
Mask Generation Function
\emph default
 (MGF, in Abbildung
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:crypto_rsa_pkcs1v21"

\end_inset

 mit 
\family typewriter
F
\family default
 bezeichnet) aus, welche selbst wiederum eine Hash-Funktion H verwendet.
 Die MGF kann dasselbe leisten wie die Hash-Funktion, nämlich eine große
 Eingangsmenge auf eine kleine Ausgangsmenge abbilden (mit 
\begin_inset Formula $\left\Vert \operatorname{H}\right\Vert $
\end_inset

 soll im folgenden die Breite eines Hash-Wertes bezeichnet sein).
 Sie kann aber auch das Umgekehrte -- eine kleine Eingangsmenge auf eine
 größere Ausgangsmenge 
\begin_inset Quotes pld
\end_inset

zerstreuen
\begin_inset Quotes prd
\end_inset

.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
mbox{PKCS
\backslash
,
\backslash
#1~v2.1}
\end_layout

\end_inset

 legt sich zwar in der Hash-Funktion nicht fest, definiert aber in 
\begin_inset CommandInset citation
LatexCommand cite
after "B.2.1"
key "PKCS1:2002"

\end_inset

 eine konkrete 
\emph on
Mask Generation Function
\emph default
, genannt MGF1.
\begin_inset Foot
status open

\begin_layout Plain Layout
Sowohl 
\begin_inset CommandInset citation
LatexCommand cite
key "PKCS1:2002"

\end_inset

 als auch 
\begin_inset CommandInset citation
LatexCommand cite
key "IEEE:STD1363"

\end_inset

 lassen vom Spezifikationsansatz die Verwendung anderer MGF's zu, nur
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "ISO:18033-2"

\end_inset

 definiert aber eine solche (KDF2).
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename pkcs1_v21_oaep.eps

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:crypto_rsa_pkcs1v21"

\end_inset

Blockformatierung nach PKCS
\begin_inset space \thinspace{}
\end_inset

#1
\begin_inset space ~
\end_inset

v2.1
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Die einzelnen Kodierungsschritte können folgendermaßen beschrieben werden:
\end_layout

\begin_layout Enumerate
Ergänze die Nachricht 
\family typewriter
M
\family default
 zuerst (und grundsätzlich) durch ein vorangestelltes Byte mit Wert 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hex{01}
\end_layout

\end_inset

.
\end_layout

\begin_layout Enumerate
Füge weitere 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hex{00}
\end_layout

\end_inset

-Byte's hinzu (Padding), so daß ein Datenblock 
\family typewriter
DB
\family default
 der Länge 
\begin_inset Formula $k-\left\Vert \operatorname{H}\right\Vert -1$
\end_inset

 entsteht.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Im Gegensatz zu PKCS
\begin_inset space \thinspace{}
\end_inset

#1
\begin_inset space ~
\end_inset

v1.5 ist keine Mindestanzahl vorgeschrieben (das Padding kann sogar leer
 sein).
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Bilde den Hash über ein vereinbartes, konstantes Label 
\begin_inset Formula $L$
\end_inset

 und stelle das Ergebnis als 
\begin_inset Formula $\mathrm{lHash}=\operatorname{H}(L)$
\end_inset

 an den Anfang des Datenblocks.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Praktisch ist 
\begin_inset Formula $L$
\end_inset

 oftmals einfach leer, was für das Hashing kein Problem darstellt.
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Erzeuge einen Zufallsstrom 
\family typewriter
Seed
\family default
 der Länge 
\begin_inset Formula $\left\Vert \operatorname{H}\right\Vert $
\end_inset

.
\end_layout

\begin_layout Enumerate
Berechne 
\begin_inset Formula $\mathrm{maskedDB}=\mathrm{DB}\oplus\operatorname{MGF}(\mathrm{Seed})$
\end_inset

 als Teil der 
\emph on
Encoded Message
\emph default
 (
\family typewriter
EM
\family default
).
\end_layout

\begin_layout Enumerate
Berechne 
\begin_inset Formula $\mathrm{maskedSeed}=\mathrm{Seed}\oplus\operatorname{MGF}(\mathrm{maskedDB})$
\end_inset

, als höherwertigen Teil von 
\family typewriter
EM
\family default
.
\end_layout

\begin_layout Enumerate
Stelle ein führendes 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hex{00}
\end_layout

\end_inset

-Byte an den Anfang von 
\family typewriter
EM
\family default
 (gewährleistet auch hier wieder 
\begin_inset Formula $\mathrm{EM}<n$
\end_inset

).
\end_layout

\begin_layout Standard
Im Gegensatz zu 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
mbox{PKCS
\backslash
,
\backslash
#1~v1.5}
\end_layout

\end_inset

 geht in die RSA-Verschlüsselung 
\begin_inset Formula $c=\mathrm{EM}^{e}\bmod n$
\end_inset

 hier nun ein Wert EM ein, der keinerlei Rückschlüsse auf den Datenblock
 
\family typewriter
DB
\family default
 zuläßt.
\begin_inset Foot
status open

\begin_layout Plain Layout
In 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
mbox{PKCS
\backslash
,
\backslash
#1~v1.5}
\end_layout

\end_inset

 waren zumindest 
\family typewriter
BT
\family default
 und (teils) 
\family typewriter
PS
\family default
 vorherzusagen, was sich dann auch 
\noun on
D.
\begin_inset space ~
\end_inset

Bleichenbacher
\noun default
 in seiner 
\emph on
Chosen Ciphertext
\emph default
 
\emph on
Attack
\emph default
 zunutze machte
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Bleichenbacher:1998"

\end_inset

.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Index
status open

\begin_layout Plain Layout
RSA|)
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sec_diffie_hellman"

\end_inset

Diffie-Hellmann Schlüsselaustausch
\begin_inset Index
status collapsed

\begin_layout Plain Layout
Diffie-Hellmann Schlüsselaustausch
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Das Verfahren von 
\noun on
Diffie
\noun default
 und 
\noun on
Hellmann
\noun default
 nutzt das Problem des diskreten Logarithmus
\begin_inset Foot
status open

\begin_layout Plain Layout
Genauer gesagt das sogenannte 
\noun on
Diffie
\noun default
-
\noun on
Hellmann
\noun default

\begin_inset space ~
\end_inset

Problem, welches sich durch das Produkt im Exponenten 
\begin_inset Formula $g^{ab}$
\end_inset

 vom Problem des diskreten Logarithmus unterscheidet.
\end_layout

\end_inset

 um einen Schlüsselaustausch zu realisieren.
 Voraussetzung dafür ist eine große Primzahl 
\begin_inset Formula $p$
\end_inset

 (öffentliches Modul) und ein Generator 
\begin_inset Formula $g$
\end_inset

 mit 
\begin_inset Formula $0<g<p$
\end_inset

, welche beiden Kommunikationspartnern bekannt sind.
 Der Austausch der Session Keys erfolgt folgendermaßen:
\end_layout

\begin_layout Enumerate
Zuerst erzeugt der Initiator des Protokolls ein (geheimes) Element 
\begin_inset Formula $a$
\end_inset

 mit 
\begin_inset Formula $0<a<p-1$
\end_inset

 und berechnet damit seine öffentlichen Schlüssel 
\begin_inset Formula $A=g^{a}\bmod p$
\end_inset

.
\end_layout

\begin_layout Enumerate
Dieser Schlüssel 
\begin_inset Formula $A$
\end_inset

 wird im Klartext zum Empfänger (Responder) übertragen.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Unverschlüsselt, deshalb sollte das Verfahren immer in Verbindung mit einem
 Signaturalgorithmus verwendet werden (zum Schutz vor Man-in-the-middle
 Angriffen).
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Der Empfänger erzeugt ebenfalls eine Zufallszahl 
\begin_inset Formula $b$
\end_inset

 und berechnet 
\begin_inset Formula $B=g^{b}\bmod p$
\end_inset

.
\end_layout

\begin_layout Enumerate
Anschließend überträgt er 
\begin_inset Formula $B=g^{b}\bmod p$
\end_inset

 als (unverschlüsselte) Antwort zum Initiator.
\end_layout

\begin_layout Enumerate
Beide Partner berechnen dann mit Hilfe von 
\begin_inset Formula $A$
\end_inset

 bzw.
 
\begin_inset Formula $B$
\end_inset

 den Sitzungsschlüssel 
\begin_inset Formula $g^{ab}\bmod p$
\end_inset

.
\end_layout

\begin_deeper
\begin_layout Itemize
Der Initiator berechnet 
\begin_inset Formula $B^{a}=(g^{b}\bmod p)^{a}\bmod p=g^{ab}\bmod p$
\end_inset

.
\end_layout

\begin_layout Itemize
Auf der anderen Seite wird äquivalent 
\begin_inset Formula $A^{b}=(g^{a}\bmod p)^{b}\bmod p=g^{ab}\bmod p$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sec_elliptic_curve"

\end_inset

Elliptische Kurven
\begin_inset Index
status collapsed

\begin_layout Plain Layout
Elliptische Kurven
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Elliptische Kurven werden in der Normalform nach 
\noun on
Weierstraß
\noun default

\begin_inset Index
status collapsed

\begin_layout Plain Layout
Weierstraßsche Normalform
\end_layout

\end_inset


\noun on
 
\noun default
durch Gleichungen der Form
\end_layout

\begin_layout Standard
\begin_inset Formula \[
y^{2}=x^{3}+ax+b\]

\end_inset


\end_layout

\begin_layout Standard
definiert (siehe Abbildung
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig_ellcurve_x3_1"

\end_inset

).
 Wegen der (nur) zwei freien Parameter 
\begin_inset Formula $a$
\end_inset

 und 
\begin_inset Formula $b$
\end_inset

 ist jede elliptische Kurve durch zwei Punkte
\begin_inset space ~
\end_inset


\begin_inset Formula $P_{1},P_{2}$
\end_inset

 eindeutig definiert.
 Insofern ist jeder weitere Punkt durch die Kenntnis von 
\begin_inset Formula $P_{1}$
\end_inset

 und 
\begin_inset Formula $P_{2}$
\end_inset

 festgelegt.
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{eqnarray*}
y_{1}^{2} & = & x_{1}^{3}+ax_{1}+b\\
y_{2}^{2} & = & x_{2}^{3}+ax_{2}+b\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
Für 
\begin_inset Formula $a$
\end_inset

 ergibt die Differenz beider Gleichungen
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{eqnarray*}
y_{2}^{2}-y_{1}^{2} & = & x_{2}^{3}-x_{1}^{3}+a(x_{2}-x_{1})\\
a & = & \frac{y_{2}^{2}-y_{1}^{2}-(x_{2}^{3}-x_{1}^{3})}{x_{2}-x_{1}}\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
was dann zur Berechnung von 
\begin_inset Formula $b$
\end_inset

 verwendet wird
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{eqnarray}
b & = & y_{1}^{2}-x_{1}^{3}-ax_{1}\\
 & = & \frac{x_{2}(y_{1}^{2}-x_{1}^{3})-x_{1}(y_{2}^{2}-x_{2}^{3})}{x_{2}-x_{1}}\end{eqnarray}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ellcurv_x3_1.eps

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig_ellcurve_x3_1"

\end_inset

Prinzip der Elliptische Kurve
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Zieht man nun durch 
\begin_inset Formula $P_{1},P_{2}$
\end_inset

 eine Gerade so berechnet sich ein dritter Punkt 
\begin_inset Formula $P_{3}'=(x_{3},y_{3}')$
\end_inset

 nach der Geradengleichung
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{eqnarray}
\frac{y_{3}'-y_{2}}{x_{3}-x_{2}} & = & \frac{y_{2}-y_{1}}{x_{2}-x_{1}}\\
y_{3}' & = & \frac{y_{2}-y_{1}}{x_{2}-x_{1}}(x_{3}-x_{2})+y_{2}=\frac{y_{2}-y_{1}}{x_{2}-x_{1}}(x_{3}-x_{1})+y_{1}\\
 & = & \frac{y_{2}-y_{1}}{x_{2}-x_{1}}x_{3}+\frac{y_{1}x_{2}-y_{2}x_{1}}{x_{2}-x_{1}}\\
 & = & \lambda x_{3}+\frac{y_{1}x_{2}-y_{2}x_{1}}{x_{2}-x_{1}}\end{eqnarray}

\end_inset


\end_layout

\begin_layout Standard
mit
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\lambda=\frac{y_{2}-y_{1}}{x_{2}-x_{1}}=\frac{y_{3}'-y_{1}}{x_{3}-x_{1}}=\frac{y_{3}'-y_{2}}{x_{3}-x_{2}}\]

\end_inset


\end_layout

\begin_layout Standard
Den Schnittpunkt 
\begin_inset Formula $P_{3}'$
\end_inset

 mit der elliptischen Kurve
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{eqnarray*}
y_{3}'^{2}=y_{3}^{2} & = & x_{3}^{3}+ax_{3}+b\\
 & = & x_{3}^{3}+ax_{3}+y_{1}^{2}-x_{1}^{3}-ax_{1}\\
 & = & x_{3}^{3}-x_{1}^{3}+a(x_{3}-x_{1})+y_{1}^{2}\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
findet man durch Gleichsetzen
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Unter Zuhilfenahme von 
\begin_inset Formula $a^{3}-b^{3}=(a-b)(a^{2}+ab+b^{2})$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \begin{eqnarray*}
x_{3}^{3}-x_{1}^{3}+\lambda(x_{3}-x_{1})\frac{y_{2}^{2}-y_{1}^{2}-(x_{2}^{3}-x_{1}^{3})}{y_{2}-y_{1}}+y_{1}^{2} & = & \left[\lambda(x_{3}-x_{1})+y_{1}\right]^{2}\\
x_{3}^{3}-x_{1}^{3}+\lambda(x_{3}-x_{1})(y_{2}+y_{1})-(x_{3}-x_{1})(x_{2}^{2}+x_{2}x_{1}+x_{1}^{2})+y_{1}^{2} & = & \lambda^{2}(x_{3}-x_{1})^{2}+2\lambda y_{1}(x_{3}-x_{1})+y_{1}^{2}\\
x_{3}^{2}+x_{1}x_{3}+x_{1}^{2}+\lambda(y_{2}+y_{1})-x_{2}^{2}-x_{2}x_{1}-x_{1}^{2} & = & \lambda^{2}(x_{3}-x_{1})+2\lambda y_{1}\\
x_{3}^{2}-x_{2}^{2}+x_{1}x_{3}+\lambda(y_{2}-y_{1})-x_{2}x_{1} & = & \lambda^{2}(x_{3}-x_{1})\\
x_{3}^{2}-x_{2}^{2}+x_{1}x_{3}+\lambda^{2}(x_{2}-x_{1})-x_{2}x_{1} & = & \lambda^{2}(x_{3}-x_{1})\\
(x_{3}-x_{2})(x_{3}+x_{2})+x_{1}(x_{3}-x_{2})-\lambda^{2}(x_{3}-x_{2}) & = & 0\\
x_{3}+x_{2}+x_{1}-\lambda^{2} & = & 0\\
x_{3} & = & \lambda^{2}-x_{2}-x_{1}\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
Aus der Geradengleichung ist nun auch 
\begin_inset Formula $y_{3}'$
\end_inset

 berechenbar
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{eqnarray*}
y_{3}' & = & \lambda(x_{3}-x_{1})+y_{1}\\
 & = & \lambda(\lambda^{2}-x_{2}-2x_{1})+y_{1}\\
 & = & \lambda^{3}-\lambda(x_{2}+2x_{1})+y_{1}\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Paragraph
Anwendbarkeit
\end_layout

\begin_layout Standard
Der kryptologische Hintergrund ist nun folgender.
 Man definiert die Addition zweier Punkte 
\begin_inset Formula $P_{1},P_{2}$
\end_inset

 zu 
\begin_inset Formula $P_{3}=P_{1}+P_{2}$
\end_inset

 so, daß 
\begin_inset Formula $P_{3}$
\end_inset

 (wie in Abbildung
\begin_inset space ~
\end_inset

 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig_ellcurve_x3_1"

\end_inset

 dargestellt) wieder auf der elliptischen Kurve liegt
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Diese Operation kann man auf dem Körper der rationalen Zahlen
\begin_inset space ~
\end_inset


\begin_inset Formula $\mathbb{Q}$
\end_inset

 oder z.B.
\begin_inset space ~
\end_inset

auf der Menge der ganzen Zahlen modulo einer Primzahl
\begin_inset space ~
\end_inset


\begin_inset Formula $\mathbb{F_{p}}$
\end_inset

 definieren (der kryptologisch interessantere Fall).
\end_layout

\end_inset

.
 Die Menge aller dieser Punkte 
\begin_inset Formula $P_{3}$
\end_inset

 soll eine 
\noun on
Abel
\noun default
sche Gruppe 
\begin_inset Formula $(G,+)$
\end_inset

 bilden, d.h.
 es müssen folgende Bedingungen erfüllt sein.
\end_layout

\begin_layout Enumerate
Die Addition von 
\begin_inset Formula $P_{1},P_{2}\in G$
\end_inset

 führt in jedem Fall zu 
\begin_inset Formula $P_{3}\in G=P_{1}+P_{2}$
\end_inset

.
 Sie ist folgendermaßen erklärt:
\end_layout

\begin_deeper
\begin_layout Enumerate
Normalfall
\begin_inset Newline newline
\end_inset


\begin_inset Formula \begin{eqnarray*}
x_{3} & = & \lambda^{2}-x_{2}-x_{1}\\
-y_{3} & = & \lambda(x_{3}-x_{1})+y_{1}\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Enumerate
Für 
\begin_inset Formula $P_{1}=P_{2}=P=(x,y)$
\end_inset

 (der Anstieg 
\begin_inset Formula $\frac{y_{2}-y_{1}}{x_{2}-x_{1}}\rightarrow\infty$
\end_inset

) wird die Tangente angelegt, d.h.
 
\begin_inset Formula $\lambda$
\end_inset

 entspricht der ersten Ableitung der elliptischen Kurve am Punkt 
\begin_inset Formula $P$
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Formula \[
\lambda=\frac{1}{2}\frac{3x^{2}+a}{\sqrt{x^{3}+ax+b}}=\frac{3x^{2}+a}{2y}\]

\end_inset

 und es gilt
\begin_inset Newline newline
\end_inset


\begin_inset Formula \begin{eqnarray*}
x_{3} & = & \left(\frac{3x^{2}+a}{2y}\right)^{2}-2x\\
y_{3} & = & \frac{3x^{2}+a}{2y}(x-x_{3})-y\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Enumerate
Im Fall 
\begin_inset Formula $x_{1}=x_{2}$
\end_inset

 und 
\begin_inset Formula $y_{2}=-y_{1}$
\end_inset

 wird 
\begin_inset Formula $P_{3}=(0,0)$
\end_inset

 definiert.
\end_layout

\end_deeper
\begin_layout Enumerate
Die Addition sei assoziativ: 
\begin_inset Formula $P_{1}+(P_{2}+P_{3})=(P_{1}+P_{2})+P_{3}$
\end_inset

 für 
\begin_inset Formula $P_{1},P_{2},P_{3}\in G$
\end_inset

,
\end_layout

\begin_layout Enumerate
Es gibt das neutrale Element 
\begin_inset Formula $O\in G$
\end_inset

 mit 
\begin_inset Formula $P+O=O+P=P$
\end_inset

 für 
\begin_inset Formula $P\in G$
\end_inset

 .
 Nimmt man an, daß 
\begin_inset Formula $O=(x_{1},y_{1})$
\end_inset

 ist, dann muß die Forderung 
\begin_inset Formula $P_{3}=P_{2}$
\end_inset

 gestellt werden, um 
\begin_inset Formula $(x_{1},y_{1})$
\end_inset

 zu ermitteln.
 Dazu verwendet man 
\begin_inset Formula $x_{3}=\lambda^{2}-x_{2}-x_{1}$
\end_inset

 mit 
\begin_inset Formula $\lambda=\frac{y_{3}-y_{2}}{x_{3}-x_{2}}\rightarrow\infty$
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Formula \begin{eqnarray*}
x_{1} & = & \lim_{\lambda\rightarrow\infty}\lambda^{2}-2x_{2}\\
x_{1} & = & \infty\end{eqnarray*}

\end_inset

 und damit 
\begin_inset Formula $y_{1}=\lim_{\lambda,x_{1}\rightarrow\infty}\lambda(x_{1}-x_{2})-y_{2}=\infty$
\end_inset

 .
 Das neutrale Element ist damit 
\begin_inset Formula $O=(\infty,\infty)$
\end_inset

, was auch geometrisch einleuchtend ist.
\end_layout

\begin_layout Enumerate
Zu jedem beliebigen Element 
\begin_inset Formula $P\in G$
\end_inset

 findet man 
\begin_inset Formula $-P\in G$
\end_inset

, so daß wieder 
\begin_inset Formula $(-P)+P=O$
\end_inset

 gültig ist.
\end_layout

\begin_layout Paragraph
Kryptographische Anwendung
\end_layout

\begin_layout Standard
Für die kryptographische Anwendung, insbesondere für Verfahren, die auf
 dem diskreten Algorithmus basieren, wird zuerst die Gruppenpotenz definiert
 zu 
\begin_inset Formula $y=x^{n}=x\diamond x\diamond x\cdots x\diamond x$
\end_inset

.
 Das diskrete Logarithmus Problem besteht nun bekanntermaßen darin die Zahl
\begin_inset space ~
\end_inset


\begin_inset Formula $n$
\end_inset

 zu finden, was bei einer Gruppenaddition per elliptischer Kurve ziemlich
 schwierig ist.
 Eines der bekanntesten Beispiele ist die Umsetzung des Diffie-Hellman Schlüssel
austausches (vgl.
 Abschnitt
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec_diffie_hellman"

\end_inset

) auf elliptische Kurven
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Rosing:1999"

\end_inset

.
 Aber auch Signatur- und Public-Key Verfahren können damit realisiert werden
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "IEEE:P1363"

\end_inset

,
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "ANSI:X9:62"

\end_inset

.
\end_layout

\begin_layout Section
Integrität
\begin_inset Index
status collapsed

\begin_layout Plain Layout
Integritaet@Integrität
\end_layout

\end_inset

 und Authentizität
\end_layout

\begin_layout Standard
Um die Integrität einer Nachricht zu schützen wendet man typischerweise
 entweder Message Authentication Codes (MACs) oder aber digitale Signaturen
 an
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Die Verwendung von Countern zum Schutz vor Replay-Atacken ist meist optional.
\end_layout

\end_inset

.
 Erstere sind mit symmetrischen Verfahren verbunden, letztere im Sprachgebrauch
 fast immer auf asymmetrische Algorithmen bezogen
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Integrität und Authentizität sind nicht voneinander zu trennen
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
after "9.6.1"
key "Menezes:1992"

\end_inset

.
\end_layout

\end_inset

.
 Praktisch wird bei einer Integritätsprüfung (in den meisten Fällen) gleichzeiti
g die Authentizität der Nachricht mit Bezug auf den Absender verifiziert.
\end_layout

\begin_layout Subsection
MACs
\begin_inset Index
status collapsed

\begin_layout Plain Layout
MAC
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Die gebräuchlichsten Verfahren der Bildung von MACs sind mittlerweile standardis
iert, 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
eg
\end_layout

\end_inset

 in
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "ISO:9797-2"

\end_inset

.
 Dabei handelt es sich um den CBC-MAC und den HMAC mit kryptographischen
 Hashfunktionen wie MD5
\begin_inset Index
status collapsed

\begin_layout Plain Layout
MD5
\end_layout

\end_inset

, SHA-1
\begin_inset Index
status collapsed

\begin_layout Plain Layout
SHA-1
\end_layout

\end_inset

 oder RIPEMD-160
\begin_inset Index
status collapsed

\begin_layout Plain Layout
RIPEMD-160
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsubsection
CBC-MAC
\begin_inset Index
status collapsed

\begin_layout Plain Layout
MAC!CBC-
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sec:cbc_mac"

\end_inset


\end_layout

\begin_layout Standard
Beim CBC-MAC handelt es sich um ein schon relativ lange in Benutzung befindliche
s Verfahren zur Erzeugung von MACs
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "ISO:9797-1"

\end_inset

.
 Dabei wird eine Blockchiffre im CBC-Modus genutzt, deren Zwischenergebnisse
 jedoch nicht weiterverwendet.
 Statt dessen wird nur das Resultat der letzten Verschlüsselung (immer mit
 dem Schlüssel 
\begin_inset Formula $K$
\end_inset

) als kryptographische Prüfsumme (MAC) über die Nachricht 
\begin_inset Formula $M$
\end_inset

 interpretiert.
 Folgende Formel beschreibt jeden Einzelschritt:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
c_{i}=E_{K}(c_{i-1}\oplus m_{i})\textrm{ mit }c_{-1}={IV}.\]

\end_inset


\end_layout

\begin_layout Standard
Abbildung
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:cbcmac_proc"

\end_inset

 stellt das gesamte Verfahren anschaulich dar.
 Erwähnt werden soll noch, daß
\end_layout

\begin_layout Itemize
die Nachricht 
\begin_inset Formula $M$
\end_inset

 bei Bedarf auf die Blockbreite des Algorithmus 
\begin_inset Formula $E$
\end_inset

 zu padden ist
\end_layout

\begin_layout Itemize
und immer ein Initialisierungsvektor
\begin_inset Index
status collapsed

\begin_layout Plain Layout
Initialisierungsvektor
\end_layout

\end_inset

 (IV
\begin_inset Index
status collapsed

\begin_layout Plain Layout
IV|see
\begin_inset ERT
status open

\begin_layout Plain Layout

{Initialisierungsvektor}
\end_layout

\end_inset


\end_layout

\end_inset

) benötigt wird
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Der IV kann durchaus statisch sein, da ein Codebook-Angriff auf den ersten
 Block (wie bei der CBC-Verschlüsselung möglich) hier nicht anwendbar ist
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
after "9.5.1"
key "Menezes:1992"

\end_inset

.
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename cbc_mac.eps

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:cbcmac_proc"

\end_inset

Bildung des CBC-MAC
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
XCBC-MAC
\begin_inset Index
status collapsed

\begin_layout Plain Layout
MAC!XCBC-
\end_layout

\end_inset


\begin_inset Index
status collapsed

\begin_layout Plain Layout
XCBC-MAC
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Der XCBC-MAC (Extended MAC) geht im Original auf
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Black:2000"

\end_inset

 zurück, hat seine Popularität aber wahrscheinlich IPSec zu verdanken
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "RFC3566"

\end_inset

.
 Er behebt eine Schwachstelle des CBC-MAC, die nur bei Nachrichten variabler
 Länge in Erscheinung tritt
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
after "Example~9.62"
key "Menezes:1992"

\end_inset

.
 Die Bildungsvorschrift entspricht weitestgehend dem CBC-MAC, unterscheidet
 sich jedoch wesentlich bei der Behandlung des letzten Blocks (siehe Abbildung
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:xcbc_mac"

\end_inset

).
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:xcbc_mac_multiple"

\end_inset

ohne Padding
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename xcbc_mac_multiple.eps

\end_inset


\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:xcbc_mac_padding"

\end_inset

mit Padding
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename xcbc_mac_padding.eps

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:xcbc_mac"

\end_inset

Bildung des XCBC-MAC
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Die Einzelschritte sind:
\end_layout

\begin_layout Enumerate
Aus dem Schlüssel 
\begin_inset Formula $K$
\end_inset

 werden durch Verschlüsselung drei neue Schlüssel erzeugt.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Formula \begin{align*}
K_{1} & =E_{K}(\hex{01}\ldots\hex{01})\\
K_{2} & =E_{K}(\hex{02}\ldots\hex{02})\\
K_{3} & =E_{K}(\underbrace{\hex{03}\ldots\hex{03}}_{n/8})\end{align*}

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Mit dem Schlüssel 
\begin_inset Formula $K_{1}$
\end_inset

 wird, abgesehen vom letzten Block, ein CBC-MAC nach Abschnitt
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:cbc_mac"

\end_inset

 gebildet.
\end_layout

\begin_layout Enumerate
Die Verarbeitung des letzten Blocks wird nach Abbildung
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:xcbc_mac"

\end_inset

 vorgenommen, wobei das Vorgehen davon abhängt, ob die Länge der Nachricht
 
\begin_inset Formula $M$
\end_inset

 ein Vielfaches der Blockbreite 
\begin_inset Formula $n$
\end_inset

 ist.
\end_layout

\begin_deeper
\begin_layout Enumerate
Ist die Länge der Nachricht ein Vielfaches der Blockbreite 
\begin_inset Formula $n$
\end_inset

, dann wird im letzten Schritt
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Formula \[
\mbox{MAC}=E_{K_{1}}(m_{i}\oplus c_{i-1}\oplus K_{2})\]

\end_inset


\end_layout

\begin_layout Standard
gerechnet.
\end_layout

\end_deeper
\begin_layout Enumerate
Sollte jedoch Padding
\begin_inset Index
status collapsed

\begin_layout Plain Layout
Padding
\end_layout

\end_inset

 nötig ein, dann wird zuerst ein 
\begin_inset Formula $1$
\end_inset

-Bit angehängt und bei Bedarf auf ein Vielfaches von 
\begin_inset Formula $n$
\end_inset

 mit Nullen aufgefüllt.
 Die Berechnung des MAC geht nach Abbildung
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:xcbc_mac_padding"

\end_inset

 vor sich:
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "$\"|\"|$"
description "Concatenation"

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Formula \[
\mbox{MAC}=E_{K_{1}}(\underbrace{m_{i}||(100\ldots00)}_{n}\oplus c_{i-1}\oplus K_{3}).\]

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Subsubsection
Hash-MAC (HMAC)
\begin_inset Index
status collapsed

\begin_layout Plain Layout
MAC!Hash-
\end_layout

\end_inset


\begin_inset Index
status collapsed

\begin_layout Plain Layout
HMAC
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Der HMAC einer Message 
\begin_inset Formula $M$
\end_inset

 wird mittels einer kryptographischen Hashfunktion
\begin_inset Foot
status open

\begin_layout Plain Layout
Die Hashfunktion bestimmt in wesentlichem Maße die Sicherheit des Algorithmus.
\end_layout

\end_inset


\begin_inset Index
status collapsed

\begin_layout Plain Layout
Hashfunktion
\end_layout

\end_inset

 
\begin_inset Formula $H$
\end_inset

 berechnet
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "RFC2104,ISO:9797-2,FIPS:198-1"

\end_inset

.
 Dazu geht man in folgenden Schritten vor:
\end_layout

\begin_layout Enumerate
Der geheime Schlüssel 
\begin_inset Formula $K$
\end_inset

 wird durch Anhängen von Null-Bytes auf die Blockbreite der Hashfunktion
\begin_inset Foot
status open

\begin_layout Plain Layout
Der Fall, daß die Länge des Schlüssels 
\begin_inset Formula $K$
\end_inset

 die Blockbreite der Hashfunktion überschreitet kommt in der Praxis weniger
 häufig vor.
 Tritt er aber ein, so wird nach
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "RFC2104"

\end_inset

 in einem vorgelagerten Schritt 
\begin_inset Formula $K'=\operatorname{H}(K)$
\end_inset

 gebildet und an Stelle von 
\begin_inset Formula $K$
\end_inset

 immer mit 
\begin_inset Formula $K'$
\end_inset

 gearbeitet.
\end_layout

\end_inset

 gebracht (ANSI-Padding
\begin_inset Index
status collapsed

\begin_layout Plain Layout
Padding
\end_layout

\end_inset


\begin_inset Index
status collapsed

\begin_layout Plain Layout
Padding!ANSI-
\end_layout

\end_inset

).
\end_layout

\begin_layout Enumerate
Der so verlängerte Schlüssel wird nun mit einer Wiederholung von 
\begin_inset Formula $\hex{36}$
\end_inset

 bitweise Exklusiv-Oder (XOR) verknüpft.
\end_layout

\begin_layout Enumerate
An diesen ersten Block wird die (zu schützende) Message 
\begin_inset Formula $M$
\end_inset

 angehängt und auf die Verkettung unsere Hashfunktion 
\begin_inset Formula $\operatorname{H}$
\end_inset

 angewendet.
 Als Resultat erhält man: 
\begin_inset Formula $I\textrm{(nner)}=\operatorname{H}[(K||\hex{00}\ldots\hex{00})\oplus(\hex{36}\ldots\hex{36})||M]$
\end_inset

.
\end_layout

\begin_layout Enumerate
Genauso wie in Punkt 1 und 2 wird nun der Schlüssel 
\begin_inset Formula $K$
\end_inset

 nocheinmal verarbeitet, nur das die XOR-Operation mit 
\begin_inset Formula $\hex{5C}$
\end_inset

 erfolgt.
\end_layout

\begin_layout Enumerate
An das Ergebnis wird 
\begin_inset Formula $I\textrm{(nner)}$
\end_inset

 angehängt und darauf erneut die Hash-Funktion 
\begin_inset Formula $\operatorname{H}$
\end_inset

 angewendet.
 Als Ergebnis liegt schlußendlich der HMAC der Message 
\begin_inset Formula $M$
\end_inset

 vor
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Die Bildung von 
\begin_inset Formula $O\textrm{(uter)}$
\end_inset

 ist recht effizient, da nur zwei Blöcke zu verarbeiten sind.
\end_layout

\end_inset

: 
\begin_inset Formula $O\textrm{(uter)}=\operatorname{H}[(K||\hex{00}\ldots\hex{00})\oplus(\hex{5C}\ldots\hex{5C})||I]$
\end_inset

.
\end_layout

\begin_layout Standard
Abbildung
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:hmac_proc"

\end_inset

 veranschaulicht das gesamte Verfahren.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename hmac.eps
	width 100col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:hmac_proc"

\end_inset

Bildung des HMAC
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Signaturen
\end_layout

\begin_layout Subsubsection
Einleitung
\end_layout

\begin_layout Standard
Elektronische Signaturen
\begin_inset Index
status collapsed

\begin_layout Plain Layout
Signatur
\end_layout

\end_inset

 dienen der Authentifizierung -- im Sinne dessen daß sie (
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cf
\end_layout

\end_inset

 Signaturgesetz
\begin_inset Index
status collapsed

\begin_layout Plain Layout
Signaturgesetz
\end_layout

\end_inset

):
\end_layout

\begin_layout Itemize
dem Inhaber eines Signaturschlüssels eindeutig zugeordnet sind 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
resp
\end_layout

\end_inset

 ihn identifizieren;
\end_layout

\begin_layout Itemize
eine nachträgliche Änderung der Daten (Nachricht), mit denen sie verknüpft
 sind, sicher erkennbar machen.
\end_layout

\begin_layout Standard
Man unterscheidet Signaturen mit 
\begin_inset Quotes pld
\end_inset

Message Recovery
\begin_inset Quotes prd
\end_inset


\begin_inset Index
status collapsed

\begin_layout Plain Layout
Signatur!mit 
\begin_inset Quotes pld
\end_inset

Message Recovery
\begin_inset Quotes prd
\end_inset


\end_layout

\end_inset

 (siehe 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
eg
\end_layout

\end_inset


\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "ISO:9796-2"

\end_inset

 oder
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Menezes:1992"

\end_inset

) und Signaturen mit 
\begin_inset Quotes pld
\end_inset

Appendix
\begin_inset Quotes prd
\end_inset


\begin_inset Index
status collapsed

\begin_layout Plain Layout
Signatur!mit 
\begin_inset Quotes pld
\end_inset

Appendix
\begin_inset Quotes prd
\end_inset


\end_layout

\end_inset

.
 In der Praxis werden Signaturen mit Anhang nach
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "IEEE:STD1363,PKCS1:2002,FIPS:186-3,ANSI:X9.62"

\end_inset

 wohl am häufigsten verwendet.
 Ihre Bildungsvorschrift kann man wiefolgt skizzieren (siehe auch Abbildung
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:crypto_sign_appendix"

\end_inset

):
\end_layout

\begin_layout Enumerate
H(ash): Berechne den Hash
\begin_inset Index
status collapsed

\begin_layout Plain Layout
Hash
\end_layout

\end_inset

 (
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
resp
\end_layout

\end_inset

 Message Digest
\begin_inset Index
status collapsed

\begin_layout Plain Layout
Message Digest (MD)
\end_layout

\end_inset

) der Nachricht 
\begin_inset Formula $M$
\end_inset

.
\end_layout

\begin_layout Enumerate
C(oding): Kodiere das Ergebnis nach einem dem Kryptoalgorithmus (siehe nächster
 Punkt) angepaßten Schema.
\end_layout

\begin_layout Enumerate
E(ncrypt): Verschlüssele den so strukturierten Hash mit dem privaten Teil
 
\begin_inset Formula $K_{\mathrm{priv}}$
\end_inset

 des Signaturschlüssels.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename signapp.eps

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:crypto_sign_appendix"

\end_inset

Signatur mit Anhang
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Die Integrität der empfangenen (und möglicherweise veränderten) Nachricht
 
\begin_inset Formula $M'$
\end_inset

 kann im weiteren mit Hilfe der Signatur verifiziert werden.
 Dazu sind auf der Empfängerseite folgende Schritte nötig:
\end_layout

\begin_layout Enumerate
Berechne 
\begin_inset Formula $\operatorname{H}(M')$
\end_inset

 in gleicher Art und Weise wie beim Herausgeber.
\end_layout

\begin_layout Enumerate
Entschlüssele die Signatur mit Hilfe des öffentlichen Teils 
\begin_inset Formula $K_{\mathrm{pub}}$
\end_inset

 des Signaturschlüssels und dekodiere 
\begin_inset Formula $\operatorname{H}(M)$
\end_inset

.
\end_layout

\begin_layout Enumerate
Vergleiche 
\begin_inset Formula $\operatorname{H}(M)$
\end_inset

 mit 
\begin_inset Formula $\operatorname{H}(M')$
\end_inset

 um die Integrität 
\begin_inset Formula $M'=M$
\end_inset

 zu verifizieren.
\end_layout

\begin_layout Subsubsection
RSA-Signaturen nach PKCS #1
\end_layout

\begin_layout Standard
\begin_inset Index
status collapsed

\begin_layout Plain Layout
PKCS
\begin_inset space ~
\end_inset

#1
\end_layout

\end_inset

Die RSA-Signatur
\begin_inset Index
status collapsed

\begin_layout Plain Layout
Signatur!RSA-
\end_layout

\end_inset


\begin_inset Index
status collapsed

\begin_layout Plain Layout
Signatur!nach PKCS~#1
\end_layout

\end_inset

 über eine Nachricht 
\begin_inset Formula $m$
\end_inset

 wird berechnet, indem der Hash-Wert von 
\begin_inset Formula $m$
\end_inset

 mit dem privaten RSA-Schlüssel (
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
cf
\end_layout

\end_inset

 Abschnitt
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec_rsa"

\end_inset

) verschlüsselt wird.
 Auf der Empfangsseite muß der, mit dem öffentlichen Schlüssel entschlüsselte
 Hash, mit dem berechneten Wert für die Nachricht übereinstimmen
\begin_inset Foot
status open

\begin_layout Plain Layout
Die (etwas unübliche) Verwendung des privaten Schlüssels für die Verschlüsselung
 ist auf der Grundlage von Symmetrieformel
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "eq:rsa_symmetry"

\end_inset

 möglich.
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
RSA hat die für digitale Signaturen
\begin_inset Index
status collapsed

\begin_layout Plain Layout
Signatur
\end_layout

\end_inset

 wichtige Eigenschaft, daß Ver- und Entschlüsselung vertauschbar sind.
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{align}
p & =\textrm{RSA}_{(e,n)}\left\{ \textrm{RSA}_{(d,n)}\left[\vphantom{\textrm{RSA}_{(d,n)}}p\right]\right\} =\textrm{RSA}_{(e,n)}\left\{ \textrm{RSA}_{(d,n)}\left[\vphantom{\textrm{RSA}_{(e,n)}}p\right]\right\} \label{eq:rsa_symmetry}\end{align}

\end_inset


\end_layout

\begin_layout Standard
PKCS 
\begin_inset CommandInset citation
LatexCommand cite
key "PKCS1:2002"

\end_inset

, 
\begin_inset CommandInset citation
LatexCommand cite
key "Bellare:1996"

\end_inset


\end_layout

\begin_layout Subsubsection
Digital Signature Algorithm
\begin_inset Index
status collapsed

\begin_layout Plain Layout
Digital Signature Algorithm
\end_layout

\end_inset

 (DSA
\begin_inset Index
status collapsed

\begin_layout Plain Layout
DSA
\end_layout

\end_inset

)
\end_layout

\begin_layout Standard
Der 
\emph on
Digital Signature Algorithm
\emph default
 (DSA) ist in
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "FIPS:186"

\end_inset

 standardisiert.
 wurde für ATM Security in
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
after "Annex~6.8.2"
key "ATMF:SecuritySpec:1999"

\end_inset

 verwendet.
 Signiert wird der Hash-Wert
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Durch FIPS
\begin_inset space ~
\end_inset

PUB wird hier i.A.
 die Verwendung des SHA-1 Algorithmus gefordert.
\end_layout

\end_inset

 
\begin_inset Formula $h(m)$
\end_inset

 der Message 
\begin_inset Formula $m$
\end_inset

.
 
\end_layout

\begin_layout Paragraph
Voraussetzung
\end_layout

\begin_layout Enumerate
Zuerst wählt man wieder eine große Primzahl 
\begin_inset Formula $p$
\end_inset

 (das Modul) und ermittelt einen primen Teiler der 
\noun on
Euler
\noun default
-Funktion 
\begin_inset Formula $\totient(p)=(p-1)$
\end_inset

, bezeichnet mit 
\begin_inset Formula $q$
\end_inset

.
\end_layout

\begin_layout Enumerate
Nun wird eine Zahl 
\begin_inset Formula $h$
\end_inset

 (mit 
\begin_inset Formula $1<h<p-1$
\end_inset

) gewählt und modulo-exponentiert zu
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Formula \begin{equation}
g=h^{(p-1)/q}\bmod p\label{eqn_dsa_exp_g}\end{equation}

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Außerdem wird ein privater Schlüssel 
\begin_inset Formula $x$
\end_inset

 mit 
\begin_inset Formula $0<x<q$
\end_inset

 gewählt.
\end_layout

\begin_layout Enumerate
Der öffentliche Schlüssel 
\begin_inset Formula $y$
\end_inset

 wird nach folgender Formel berechnet:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Formula \begin{equation}
y=g^{x}\bmod p\label{eqn_dsa_pubkey_y}\end{equation}

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Die Daten 
\begin_inset Formula $p,q$
\end_inset

 (optional 
\begin_inset Formula $g$
\end_inset

, dann muß 
\begin_inset Formula $g$
\end_inset

 nicht erneut berechnet werden) sowie der öffentliche Schlüssel 
\begin_inset Formula $y$
\end_inset

 werden sicher an den/die Empfänger verteilt.
\end_layout

\begin_layout Paragraph
Signieren
\end_layout

\begin_layout Standard
Zum Signieren wählt man eine beliebige Zahl
\begin_inset space ~
\end_inset


\begin_inset Formula $k$
\end_inset

, mit 
\begin_inset Formula $0<k<q$
\end_inset

, und berechnet damit zwei Zahlen 
\begin_inset Formula $r,s$
\end_inset

 nach folgender Vorschrift:
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{eqnarray}
r & = & g^{k}\bmod p\bmod q\label{eqn_dsa_sign_r}\\
s & = & k^{-1}\left[h(m)+xr\right]\bmod q\label{eqn_dsa_sign_s}\end{eqnarray}

\end_inset


\end_layout

\begin_layout Standard
Zur Bestimmung des inversen 
\begin_inset Formula $k$
\end_inset

 ist das Lösen der Kongruenz 
\begin_inset Formula $k^{-1}k\equiv1\pmod{q}$
\end_inset

 notwendig.
 Vorteilhaft können sowohl Gleichung
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "eqn_dsa_sign_r"

\end_inset

 als auch 
\begin_inset Formula $k^{-1}$
\end_inset

 im Voraus (off-line) berechnet werden
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
In sehr seltenen Fällen kann sowohl 
\begin_inset Formula $r$
\end_inset

 als auch 
\begin_inset Formula $s$
\end_inset

 Null werden, dann sollte man eine andere Zahl 
\begin_inset Formula $k$
\end_inset

 wählen.
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Abschließend wird die Message 
\begin_inset Formula $m$
\end_inset

 sowie 
\begin_inset Formula $(r,s)$
\end_inset

 als Signatur zum Empfänger übertragen.
\end_layout

\begin_layout Paragraph
Verifizieren
\end_layout

\begin_layout Standard
Das Verifizieren einer empfangenen Signatur 
\begin_inset Formula $(\hat{r},\hat{s})$
\end_inset

 erfolgt folgendermaßen:
\end_layout

\begin_layout Enumerate
Zuerst wird geprüft ob 
\begin_inset Formula $0<\hat{r}<q$
\end_inset

 und 
\begin_inset Formula $0<\hat{s}<q$
\end_inset

 gilt.
\end_layout

\begin_layout Enumerate
Dann berechnet der Empfänger aus dem empfangenen
\begin_inset space ~
\end_inset


\begin_inset Formula $\hat{s}$
\end_inset

 das Modulo-Inverse 
\begin_inset Formula $w=\hat{s}^{-1}\bmod q$
\end_inset


\end_layout

\begin_layout Enumerate
Damit werden zwei Exponenten berechnet
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula $u_{1}=\left[h(m)w\right]\bmod q$
\end_inset

 und
\end_layout

\begin_layout Enumerate
\begin_inset Formula $u_{2}=(\hat{r}w)\bmod q$
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Zuletzt wird 
\begin_inset Formula $v=\left[g^{u_{1}}\cdot y^{u_{2}}\right]\bmod p\bmod q$
\end_inset

 berechnet, was genau 
\begin_inset Formula $\hat{r}$
\end_inset

 entsprechen muß.
\end_layout

\begin_layout Paragraph
Beweis
\end_layout

\begin_layout Standard
Dazu für richtige Signatur, d.h.
 
\begin_inset Formula $r=\hat{r}$
\end_inset

 und 
\begin_inset Formula $s=\hat{s}$
\end_inset

, ausgehend von Gleichung
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "eqn_dsa_pubkey_y"

\end_inset

 und der Berechnungsformel für
\begin_inset space ~
\end_inset


\begin_inset Formula $v$
\end_inset

, der Beweis.
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{align*}
v & =\left(g^{u_{1}}\cdot y^{u_{2}}\right)\bmod p\pmod{q}\\
 & =\left[g^{h(m)w-l_{1}q}\cdot y^{rw-l_{2}q}\right]\bmod p\pmod{q}\\
 & =\left[g^{-(l_{1}+l_{2})q}\cdot g^{h(m)w}\cdot(g^{x}\bmod p)^{rw}\right]\bmod p\pmod{q}\\
 & =\left[g^{-(l_{1}+l_{2})q}\cdot g^{h(m)w}\cdot g^{xrw}\right]\bmod p\pmod{q}\\
 & =\left\{ g^{-(l_{1}+l_{2})q}\cdot g^{\left[h(m)+xr\right]w}\right\} \bmod p\pmod{q}\\
 & =\left\{ g^{-(l_{1}+l_{2})q}\cdot g^{s^{-1}\left[h(m)+xr\right]}\right\} \bmod p\pmod{q}\end{align*}

\end_inset


\end_layout

\begin_layout Standard
Umformung von Voraussetzung in Formel
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "eqn_dsa_sign_s"

\end_inset

 zu
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{align*}
sk & =h(m)+xr\pmod{q}\\
k & =s^{-1}\left[h(m)+xr\right]\pmod{q}\end{align*}

\end_inset


\end_layout

\begin_layout Standard
und Einsetzen liefert für 
\begin_inset Formula $v$
\end_inset

 unter Zuhilfenahme von Gleichung
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "eqn_dsa_exp_g"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \begin{eqnarray*}
v & = & \left[g^{-(l_{1}+l_{2})q}\bmod p\cdot g^{k}\bmod p\right]\bmod p\pmod{q}\\
 & = & \left[\left(g^{q}\right)^{-(l_{1}+l_{2})}\bmod p\cdot g^{k}\bmod p\right]\bmod p\pmod{q}\\
 & = & \left[\left(g^{q}\bmod p\right)^{-(l_{1}+l_{2})}\bmod p\cdot g^{k}\bmod p\right]\bmod p\pmod{q}\\
 & = & \left[\left(h^{p-1}\bmod p\right)^{-(l_{1}+l_{2})}\bmod p\cdot g^{k}\bmod p\right]\bmod p\pmod{q}\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
für jedes 
\begin_inset Formula $l_{\upsilon}\in\mathbb{Z}$
\end_inset

.
\end_layout

\begin_layout Standard
Nach 
\noun on
Fermat
\noun default
s 
\begin_inset Quotes eld
\end_inset

kleinem
\begin_inset Quotes erd
\end_inset

 Satz ist aber 
\begin_inset Formula $h^{p-1}\bmod p$
\end_inset

 kongruent Eins und es ergibt sich für 
\begin_inset Formula $v$
\end_inset

 endgültig
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{eqnarray*}
v & = & g^{k}\bmod p\pmod{q}\\
v & = & r\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Branch WITH_ESIGN
status open

\begin_layout Subsubsection
Efficient Digital Signature Scheme (ESIGN)
\end_layout

\begin_layout Standard

\emph on
ESIGN
\emph default

\begin_inset Index
status collapsed

\begin_layout Plain Layout
ESIGN
\end_layout

\end_inset


\begin_inset Index
status collapsed

\begin_layout Plain Layout
Efficient Digital Signature Scheme
\end_layout

\end_inset

 nutzt wieder das Faktorisierungsproblem großer Zahlen als Einweg-Funktion
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "okamoto:1990"

\end_inset

.
 Zum Signieren wird aus dem Hashwert der Message 
\begin_inset Formula $h'(m)$
\end_inset

 ein Signaturblock
\begin_inset space ~
\end_inset


\begin_inset Formula $h(m)$
\end_inset

 nach
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
after "Annex~6.8.3.1"
key "ATMF:SecuritySpec:1999"

\end_inset

 gebildet, der dann mit dem 
\emph on
ESIGN
\emph default
-Verfahren bearbeitet wird..
\end_layout

\begin_layout Paragraph
Voraussetzung
\end_layout

\begin_layout Enumerate
Zuerst wählt man zwei große Primzahlen 
\begin_inset Formula $p$
\end_inset

 und 
\begin_inset Formula $q$
\end_inset

 (
\begin_inset Formula $p>q$
\end_inset

 aber mit gleicher Bitlänge 
\begin_inset Formula $L_{p}=L_{q}=L$
\end_inset

), die den privaten Schlüssel 
\begin_inset Formula $(p,q)$
\end_inset

 bilden.
\end_layout

\begin_layout Enumerate
Daraus wird das öffentliche Modul 
\begin_inset Formula $n=p^{2}q$
\end_inset

 (mit Bitlänge 
\begin_inset Formula $L_{n}=3L$
\end_inset

 und Nebenbedingung 
\begin_inset Formula $h(m)<n$
\end_inset

) berechnet, welches zusammen mit einer Zahl 
\begin_inset Formula $k\geq4$
\end_inset

 den öffentlichen Schlüssel 
\begin_inset Formula $(n,k)$
\end_inset

 bildet.
\end_layout

\begin_layout Paragraph
Signieren
\end_layout

\begin_layout Enumerate
Zum Signieren wird jetzt eine Zufallszahl 
\begin_inset Formula $x$
\end_inset

 mit 
\begin_inset Formula $0\leq x<pq$
\end_inset

 gewählt.
\end_layout

\begin_layout Enumerate
Es werden daraus die folgenden Größen berechnet
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Formula $y=\left\lceil x\right\rceil $
\end_inset

 wird als 
\emph on
ceil
\emph default
-Funktion bezeichnet und definiert die kleinste Zahl 
\begin_inset Formula $x$
\end_inset

 die größer oder gleich 
\begin_inset Formula $x$
\end_inset

 ist.
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Formula \begin{eqnarray}
w & = & \left\lceil \frac{h(m)-(x^{k}\bmod n)}{pq}\right\rceil =\frac{h(m)-(x^{k}\bmod n)}{pq}+\frac{\epsilon}{pq},\quad\epsilon<pq\\
y & = & \frac{w}{kx^{k-1}}\bmod p=\frac{h(m)-(x^{k}\bmod n)+\epsilon}{pqkx^{k-1}}\bmod p\label{eqn_esign_y}\end{eqnarray}

\end_inset

 
\end_layout

\end_deeper
\begin_layout Enumerate
und letztlich die Signatur 
\begin_inset Formula $S$
\end_inset

 zu
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Formula \begin{equation}
S=x+ypq\label{eqn_esign_signature}\end{equation}

\end_inset


\end_layout

\end_deeper
\begin_layout Paragraph
Verifizieren
\end_layout

\begin_layout Standard
Der Empfänger verifiziert die Signatur
\begin_inset space ~
\end_inset


\begin_inset Formula $S$
\end_inset

 durch Berechnung von 
\begin_inset Formula $S^{k}\bmod n$
\end_inset

.
 Wenn dieser Wert innerhalb der Schranken
\end_layout

\begin_layout Standard
\begin_inset Formula \[
h(m)\leq S^{k}\bmod n<h(m)+2^{2L}\]

\end_inset

liegt, ist die Signatur gültig
\begin_inset Foot
status open

\begin_layout Plain Layout
Diese Bedingung wird häufig auch geschrieben als 
\begin_inset Formula $h(m)\leq S^{k}\bmod n<h(m)+2^{\left\lceil 2/3L_{n}\right\rceil }$
\end_inset


\end_layout

\end_inset

.
\end_layout

\begin_layout Paragraph
Beweis
\end_layout

\begin_layout Standard
Zuerst setzt man Gleichung
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "eqn_esign_signature"

\end_inset

 in die Verifikationsformel ein und wendet den binomischen Lehrsatz
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Binomischer Satz: 
\begin_inset Formula $(a+b)^{n}=\sum_{i=0}^{n}\binom{n}{i}a^{i}b^{n-i}$
\end_inset

 mit 
\begin_inset Formula $\binom{n}{i}=\frac{n!}{i!(n-i)!}$
\end_inset


\end_layout

\end_inset

 an
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{eqnarray*}
S^{k}\bmod n & = & (x+ypq)^{k}\bmod n\\
 & = & \sum_{i=0}^{k}\binom{k}{i}x^{i}(ypq)^{k-i}\bmod n\\
 & = & x^{k}+kypqx^{k-1}\bmod n\end{eqnarray*}

\end_inset


\begin_inset Note Note
status open

\begin_layout Plain Layout
Vereinfachung von Zeile 2 nach 3 ist mir nicht klar.
\end_layout

\begin_layout Plain Layout
Es bleiben nur die Terme für i=k und i=k-1 übrig.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Offensichtlich scheint die Substitution des Terms
\begin_inset space ~
\end_inset


\begin_inset Formula $ypq$
\end_inset

 zu lohnen, wozu Gleichung
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "eqn_esign_y"

\end_inset

 ohne das Modul
\begin_inset space ~
\end_inset


\begin_inset Formula $p$
\end_inset

 geschrieben wird.
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{eqnarray*}
y & = & \frac{h(m)-(x^{k}\bmod n)+\epsilon}{pqkx^{k-1}}-\upsilon p\\
ypqkx^{k-1} & = & h(m)-(x^{k}\bmod n)+\epsilon-\upsilon nkx^{k-1}\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
Einsetzen ergibt
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{eqnarray}
S^{k} & \equiv & x^{k}+h(m)-(x^{k}\bmod n)+\epsilon-\upsilon nkx^{k-1}\pmod{n}\\
 & = & h(m)+\epsilon-\upsilon nkx^{k-1}\pmod{n}\\
S^{k} & \equiv & h(m)+\epsilon\pmod{n}\label{eqn_esign_spowk}\end{eqnarray}

\end_inset


\end_layout

\begin_layout Standard
Man sieht sofort, daß der Ausdruck 
\begin_inset Formula $S^{k}\pmod{n}$
\end_inset

 in Formel
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "eqn_esign_spowk"

\end_inset

 immer größer als 
\begin_inset Formula $h(m)$
\end_inset

 ist.
\end_layout

\begin_layout Standard
Wegen der beschränkten Bitlänge 
\begin_inset Formula $L$
\end_inset

 von 
\begin_inset Formula $p,q$
\end_inset

 gilt immer 
\begin_inset Formula $pq<2^{2L}$
\end_inset

.
 Kombiniert mit der Bedingung 
\begin_inset Formula $\epsilon<pq$
\end_inset

 erhält man
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\epsilon<2^{2L}\]

\end_inset


\end_layout

\begin_layout Standard
Nun kann man wieder Zuhilfenahme von Gleichung
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "eqn_esign_spowk"

\end_inset

 auch den rechten Teil der Verifikationsungleichung beweisen 
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{eqnarray*}
\left[S^{k}-h(m)\right]\bmod n & < & 2^{2L}\\
S^{k}\bmod n & < & h(m)+2^{2L}\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Paragraph
Implementierung
\end_layout

\begin_layout Standard
Praktisch kann man den Algorithmus durch Offline-Berechnung der Ausdrücke
\end_layout

\begin_layout Itemize
\begin_inset Formula $x^{k}\bmod n$
\end_inset

 
\end_layout

\begin_layout Itemize
\begin_inset Formula $(1/kx^{k-1})\bmod p$
\end_inset


\end_layout

\begin_layout Standard
noch beschleunigen
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "okamoto:1990"

\end_inset

,
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "schneier:1996"

\end_inset

.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Branch WITH_APPENDIX
status open

\begin_layout Standard
\start_of_appendix
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Part*
Anhänge
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand include
filename "../algebra/algebra.lyx"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "adsp,crypto,math,security"
options "bibtotoc,geralpha"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset index_print
LatexCommand printindex

\end_inset


\end_layout

\end_body
\end_document
